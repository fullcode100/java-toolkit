/**
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import java.util.Properties;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

String currentVersion=project.version;
Properties releaseParms=new Properties();
File releaseParmsFile=new File("release.properties");

if(releaseParmsFile.exists()){
	
	InputStream releaseParmIS=null;
	try{
		releaseParmIS=new FileInputStream(releaseParmsFile);
		releaseParms.load(releaseParmIS)
	}finally{
		if(releaseParmIS!=null){
			releaseParmIS.close()
		}
	}
}

/* 
 * We have two kind of SNAPSHOT versions :
 * 1 - milestone snapshot version (IT, RC versions). They look like x.y.z.ITn-SNAPSHOT or x.y.z.RCn-SNAPSHOT, where n is the milestone number. They may ahve an alpha/beta part before the milestone part.
 * 2 - public version snapshots. They look like x.y.z-SNAPSHOT, x.y.z.alpha<n>-SNAPSHOT or x.y.z.beta<n>-SNAPSHOT
 */
Pattern itRCVersionSnapshot=Pattern.compile("(?<mainVersion>\\d+\\.\\d+\\.\\d+\\.)(?<candidateKind>((alpha[0-9]+|beta[0-9+])\\.)?(IT|RC))(?<candidateNumber>\\d+)[b-z]?-SNAPSHOT");
Pattern publicVersionSnapshot=Pattern.compile("(?<mainVersion>\\d+\\.\\d+(\\.(\\d+\\.(alpha|beta))?))(?<bugfixNr>\\d+)-SNAPSHOT");

Matcher itRCVersionMatcher=itRCVersionSnapshot.matcher(currentVersion);
Matcher publicVersionMatcher=publicVersionSnapshot.matcher(currentVersion);

String developmentVersion;
String releaseVersion;
if(itRCVersionMatcher.matches()){
    /* 
       When the released version is a milestone version, the next SNAPSHOT version is the next milestone.
       For example 1.0.0.IT1-SNAPSHOT will be released as 1.0.0.IT1 and 1.0.0.IT2-SNAPSHOT will follow.
    */
    String mainVersion=itRCVersionMatcher.group("mainVersion");
    String candidateKind=itRCVersionMatcher.group("candidateKind");
    Integer nextCandidateNumber=Integer.parseInt(itRCVersionMatcher.group("candidateNumber"))+1
    developmentVersion=mainVersion+candidateKind+nextCandidateNumber+"-SNAPSHOT"
    releaseVersion=currentVersion.replace("-SNAPSHOT","");
}else if(publicVersionMatcher.matches()){
    /* 
       When the released version is a public version, the next SNAPSHOT version is the first iteration for the next bugfix version.
       For example 1.0.0-SNAPSHOT will be released as 1.0.0 and 1.0.1.IT1-SNAPSHOT will follow.
    */
    String mainVersion=publicVersionMatcher.group("mainVersion");
    Integer bugfixVersion=Integer.parseInt(publicVersionMatcher.group("bugfixNr"))+1
    developmentVersion=mainVersion+bugfixVersion+".IT1-SNAPSHOT"
    releaseVersion=currentVersion.replace("-SNAPSHOT","");
}else{
    /* If not a recognized version scheme, we bail out because we don't know how to release it. */
    throw new IllegalArgumentException("The current version number should be x.y.z.ITn-SNAPSHOT or x.y.z.RCn-SNAPSHOT or x.y.z-SNAPSHOT. An alpha[0-9]+ or beta[0-9]+ particle may also exist, as in 1.0.0.alpha1-SNAPSHOT or 1.0.0.aplpha1.RC1-SNAPSHOT")
}
releaseParms.setProperty("project.rel."+project.groupId+':'+project.artifactId,releaseVersion)
releaseParms.setProperty("project.dev."+project.groupId+':'+project.artifactId,developmentVersion)

println(releaseParms)

/* And here we generate the relevant release version file for pipeline logic. */
File versionFile=new File("target/version.txt");
OutputStream releasePropertiesOS=null;
OutputStream versionFileOS=null;
try{
	releasePropertiesOS=new FileOutputStream(releaseParmsFile);
	releaseParms.store(releasePropertiesOS,"Originally generated by the reactor's release logic")
        
        versionFile.getParentFile().mkdirs();
        versionFileOS=new FileOutputStream(versionFile);
        versionFileOS.write(releaseVersion.getBytes("UTF-8"))

}finally{

	if(releasePropertiesOS!=null){
                        try{releasePropertiesOS.close()}catch(Exception e){}
        }
        if(releasePropertiesOS!=null){
                        try{releasePropertiesOS.close()}catch(Exception e){}
        }
}
