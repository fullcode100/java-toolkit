/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.opentestfactory.jackson.dto.v1.ExecutionResult;
import org.opentestfactory.messages.OTFMessage;
import org.opentestfactory.messages.OTFMessageAPI;

public class ExecutionResultTestBuilder {

  private static final String MIMETYPE_PREFIX = "application/vnd.opentestfactory.";

  // Build an ExecutionResult with generic attachments of given mimetypes
  // Use it when you need an ExecutionResult with just specified mimetypes
  // Ids are generated as constant + index.
  // Paths are generated as constant + index.
  public ExecutionResult build(String workflowId, String name, String... mimeTypes) {
    List<ExecutionResult.Attachment> attachments = new ArrayList<>();
    for (int i = 0; i < mimeTypes.length; i++) {
      String mimeType = mimeTypes[i];
      ExecutionResult.Attachment attachment =
          new ExecutionResult.Attachment(
              "id_" + i, MIMETYPE_PREFIX + mimeType, "tmp/otf/wf/attachment" + i);
      attachments.add(attachment);
    }
    List<String> paths =
        attachments.stream().map(ExecutionResult.Attachment::getUrl).collect(Collectors.toList());
    ExecutionResult executionResult = buildExecutionResult(paths);
    addWorkFlowMetaData(executionResult, workflowId, name);
    attachments.forEach(executionResult::addAttachment);
    return executionResult;
  }

  private void addWorkFlowMetaData(OTFMessage otfMessage, String workflowId, String name) {
    otfMessage.addMetadata(OTFMessage.WORKFLOW_ID_KEY, workflowId);
    otfMessage.addMetadata(OTFMessage.NAME_KEY, name);
  }

  private ExecutionResult buildExecutionResult(List<String> attachments) {
    return new ExecutionResult(
        OTFMessageAPI.CURRENT_API_VERSION, attachments, 0, Collections.emptyList());
  }
}
