/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils.document;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;

public class DocumentUtilsTest {

  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(DocumentUtilsTest.class);

  private static final String ATTACHMENT_NAME = "output.xml";
  private static final String ATTACHMENT_PASSING_FULL_NAME =
      "7656b6e0-913a-4ebf-836f-a81864aab07a_passing-" + ATTACHMENT_NAME;
  private static final String ATTACHMENT_PASSING =
      "src/test/resources/" + ATTACHMENT_PASSING_FULL_NAME;
  private static final String ROBOT_FRAMEWORK_OUTPUT_STATUS_XPATH =
      "/robot/suite/test/status/@status";
  private static final String ROBOT_FRAMEWORK_OUTPUT_STATUS_MALFORMED_XPATH =
      "/robot/suite/test/sta tus/@status";
  private static final String MALFORMED_XML_REPORT_PATH = "src/test/resources/malformed_output.xml";
  private static final String WARNING_XML_REPORT_PATH = "src/test/resources/warning_output.xml";

  @Test
  public void evaluateXPathTest() {
    String actual = "";
    try {
      Document document = DocumentUtils.getDocument(ATTACHMENT_PASSING);
      List<String> statusList =
          DocumentUtils.evaluateXPath(document, ROBOT_FRAMEWORK_OUTPUT_STATUS_XPATH);
      actual = statusList.get(0);
    } catch (Exception e) {
      LOGGER.error("An error occurred when attempting to parse the test report xml.", e);
    }
    Assert.assertEquals("PASS", actual);
  }

  @Test
  public void evaluateXPathWithMalformedPathTest() {
    List<String> actual = new ArrayList<>();
    try {
      Document document = DocumentUtils.getDocument(ATTACHMENT_PASSING);
      actual = DocumentUtils.evaluateXPath(document, ROBOT_FRAMEWORK_OUTPUT_STATUS_MALFORMED_XPATH);
    } catch (Exception e) {
      LOGGER.error("An error occurred when attempting to parse the test report xml.", e);
    }
    Assert.assertEquals(new ArrayList<>(), actual);
  }

  @Test
  public void getFatalErrorLogWhenMalformedXMLReportIsParse() {
    ch.qos.logback.classic.Logger logger =
        (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(SAXParseErrorHandler.class);
    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();
    listAppender.start();
    logger.addAppender(listAppender);
    Document document = null;
    try {
      document = DocumentUtils.getDocument(MALFORMED_XML_REPORT_PATH);
    } catch (Exception e) {
      LOGGER.error("An error occurred when attempting to parse the test report xml.", e);
    }
    List<ILoggingEvent> logList = listAppender.list;

    Assert.assertTrue(
        logList.stream().anyMatch(iLoggingEvent -> iLoggingEvent.getLevel() == Level.ERROR));
    Assert.assertTrue(
        logList.stream()
            .anyMatch(
                iLoggingEvent ->
                    iLoggingEvent
                        .getMessage()
                        .equals(
                            "A fatal error occurred when attempting to parse the XML Document")));
  }
}
