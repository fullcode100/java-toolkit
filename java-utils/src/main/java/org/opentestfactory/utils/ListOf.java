/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * List wrapper to add filtering and extraction functions to lists.
 *
 * @author jthebault
 * @param <T> the element type.
 */
public class ListOf<T> {
  private static final Logger LOGGER = LoggerFactory.getLogger(ListOf.class);

  private final List<T> elements;

  public ListOf(Collection<T> elements) {
    this.elements = new ArrayList<>(Objects.requireNonNull(elements));
  }

  /**
   * Get all list elements with the given (non null) value for an attribute retrieved through the
   * provided getter.
   *
   * @param <A> type of the target attribute.
   * @param getter the member function of list element type <code>T</code> that returns the target
   *     attribute.
   * @param matchingValue the target attribute value. <code>null</code> values trigger {@link
   *     NullPointerException}. To select for undefined attributes, use {@link
   *     #attributeMatchUndefined(java.util.function.Function)}
   * @return a {@link ListOf} instance containing all elements where the target attribute matches
   *     the required value.
   */
  public final <A> ListOf<T> attributeMatchValue(Function<T, A> getter, A matchingValue) {
    Objects.requireNonNull(
        matchingValue,
        "matchigValue may not be null. Use attributeMatchUndefined to select elements with an"
            + " undefined optional attribute.");
    return attributeMatchAny(getter, Collections.singletonList(matchingValue));
  }

  /**
   * Filter for list elements where the attribute is <code>null</code>.
   *
   * @param <A> type of the target attribute.
   * @param getter accessor for the target attribute.
   * @return a {@link ListOf} instance containing all elements where the target attribute value is
   *     undefined (<code>null</code> value)
   */
  public final <A> ListOf<T> attributeMatchUndefined(Function<T, A> getter) {
    return attributeMatchAny(getter, Collections.singleton(null));
  }

  /**
   * Filter for all list elements which value for the target attribute is in the given list.
   *
   * @param <A> type of the target attribute.
   * @param getter accessor for the target attribute.
   * @param matchingValues a collection containing all desired attribute values. If the collection
   *     allows for null elements, they may be used (and select list elements for which the target
   *     attribute is null.
   * @return a {@link ListOf} instance containing all elements where the target attribute matches
   *     one of the elements in matchingValues.
   */
  public <A> ListOf<T> attributeMatchAny(Function<T, A> getter, Collection<A> matchingValues) {
    List<T> attachments =
        this.elements.stream()
            .filter(
                object -> {
                  A gottenValue = getter.apply(object);
                  try {
                    return matchingValues.contains(gottenValue);
                  } catch (NullPointerException npe) {
                    /*
                     * Test for null value only if it triggers an NPE, so that null value may be used
                     * as filter criterion with a collection that accepts null elements.
                     */
                    if (gottenValue == null) {
                      LOGGER.debug(
                          "Excluding value for {} because getter {} returned null and the"
                              + " matchingValues collection doesn't accept null values.",
                          object,
                          getter);
                      return false;
                    } else {
                      throw npe;
                    }
                  }
                })
            .collect(Collectors.toList());
    return new ListOf<>(attachments);
  }

  public <A> List<A> pluck(Function<T, A> getter) {
    return this.elements.stream().map(getter).collect(Collectors.toList());
  }

  public List<T> toList() {
    return this.elements;
  }

  @Override
  public boolean equals(Object obj) {
    return elements.equals(obj);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elements);
  }
}
