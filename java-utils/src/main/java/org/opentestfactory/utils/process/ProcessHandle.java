/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils.process;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is a process handle. It allows process streams monitoring and process termination
 * management.
 *
 * @author edegenetais
 */
public class ProcessHandle {

  private static final int DEFAULT_STDERR_LENGTH = 200;

  private static final Logger LOGGER = LoggerFactory.getLogger(ProcessHandle.class);

  private String processName;
  private Process process;
  private Thread shutdownHook;
  private StreamMuncher errorStreamMonitor;
  private StreamMuncher stdoutStreamMonitor;

  /**
   * Create a process handle without shutdown hook.
   *
   * @param process process to manage.
   */
  public ProcessHandle(Process process) {
    this("Anonymous", process, false, false, 200);
  }

  /**
   * Create a process handle.
   *
   * @param processName name for the process
   * @param process process to manage.
   * @param registerShutdownHook whether to register a process shutdown hook or not.
   * @param monitorErrorStream if the error stream should be monitored.
   */
  public ProcessHandle(
      String processName,
      Process process,
      boolean registerShutdownHook,
      boolean monitorErrorStream) {
    this(processName, process, registerShutdownHook, monitorErrorStream, DEFAULT_STDERR_LENGTH);
  }
  /**
   * Create a process handle.
   *
   * @param processName name for the process
   * @param process process to manage.
   * @param registerShutdownHook whether to register a process shutdown hook or not.
   * @param monitorErrorStream if the error stream should be monitored.
   * @param maxLength max stderr record length to keep
   */
  public ProcessHandle(
      String processName,
      Process process,
      boolean registerShutdownHook,
      boolean monitorErrorStream,
      int maxLength) {
    this(processName, process, registerShutdownHook, false, monitorErrorStream, maxLength);
  }

  public ProcessHandle(
      String processName,
      Process process,
      boolean registerShutdownHook,
      boolean monitorStdoutStream,
      boolean monitorErrorStream,
      int maxLength) {
    this.process = process;
    this.processName = processName;
    if (registerShutdownHook) {
      shutdownHook = new Thread(new ProcessKiller(process));
      Runtime.getRuntime().addShutdownHook(shutdownHook);
    }
    if (monitorErrorStream) {
      errorStreamMonitor =
          new StreamMuncher(processName + "error stream", process.getErrorStream(), maxLength);
      /* This thread is a completely independant thread...thus it is out of the scope
       * of the rule invoked by sonar to flag this... */
      new Thread(errorStreamMonitor).start(); // NOSONAR
    }
    if (monitorStdoutStream) {
      stdoutStreamMonitor =
          new StreamMuncher(processName + "stdout stream", process.getInputStream(), maxLength);
      /* This thread is a completely independant thread...thus it is out of the scope
       * of the rule invoked by sonar to flag this... */
      new Thread(stdoutStreamMonitor).start(); // NOSONAR
    }
  }

  /** Kill the underlying process. */
  public void killProcess() {
    if (shutdownHook != null) {
      LOGGER.debug("removing killing shutdown hook");
      Runtime.getRuntime().removeShutdownHook(shutdownHook);
      LOGGER.debug("killing shutdown hook removed");
      shutdownHook = null;
    }

    if (errorStreamMonitor != null) {
      LOGGER.debug("killing " + processName + " error stream monitor.");
      errorStreamMonitor.requestStop();
      LOGGER.debug(processName + " error stream monitor killed");
    }
    if (stdoutStreamMonitor != null) {
      LOGGER.debug("killing " + processName + " error stream monitor.");
      stdoutStreamMonitor.requestStop();
      LOGGER.debug(processName + " error stream monitor killed");
    }

    process.destroy();
  }

  /**
   * Check if the underlying process is still alive.
   *
   * @return <code>true</code> if alive, <code>false</code> if dead.
   */
  public boolean isProcessAlive() {
    try {
      process.exitValue();
      return false;
    } catch (IllegalThreadStateException ex) {
      LOGGER.debug("Process is still alive.", ex);
      return true;
    }
  }

  /** @return process's return value. */
  public Integer returnValue() {
    Integer value;
    try {
      value = process.exitValue();
    } catch (IllegalThreadStateException itse) {
      LOGGER.debug("Process is still alive, no return value has been assigne yet.", itse);
      value = null;
    }
    return value;
  }

  /**
   * Get the last 200 lines of the process error stream.
   *
   * @return
   */
  public String getErrorStream() {
    if (errorStreamMonitor != null) {
      return errorStreamMonitor.getStreamContent();
    } else {
      return "stderr was not monitored";
    }
  }

  /**
   * Get the last 200 lines of the process error stream.
   *
   * @return
   */
  public String getStdoutStream() {
    if (stdoutStreamMonitor != null) {
      return stdoutStreamMonitor.getStreamContent();
    } else {
      return "stdout was not monitored";
    }
  }

  public String getProcessName() {
    return processName;
  }
}
