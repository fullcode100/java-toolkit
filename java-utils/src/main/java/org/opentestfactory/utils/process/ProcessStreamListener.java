/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils.process;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import org.opentestfactory.utils.shell.OutputStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class listens to a process output stream in a separate thread in order to get its output AND
 * proceed on other treatments while the process is running.
 */
public abstract class ProcessStreamListener implements Runnable {

  private static final Logger LOGGER = LoggerFactory.getLogger(ProcessStreamListener.class);

  private InputStream stream;

  private WeakReference<Process> processRef;

  public ProcessStreamListener(Process process, OutputStream targetStream) {
    processRef = new WeakReference<Process>(process);
    switch (targetStream) {
      case out:
        stream = process.getInputStream();
        break;
      case err:
        stream = process.getErrorStream();
        break;
      default:
        throw new IllegalArgumentException(targetStream.name() + " is no known stream!");
    }
  }

  public void start() {
    Process process = processRef.get();
    if (process == null) {
      LOGGER.warn("No more process to monitor, nothing will start.");
    } else {
      Thread pollingThread = new Thread(this, "stdoutPoller-" + process.toString());
      pollingThread.setDaemon(true);
      pollingThread.start();
    }
  }

  @Override
  public void run() {
    byte[] buffer = new byte[1024];
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    try {
      int nb = stream.read(buffer);
      while (processAlive()) {
        getStdoutContentIfAvailable(buffer, os, nb);
        if (processAlive()) {
          nb = stream.read(buffer);
        }
      }
      LOGGER.debug("Process is dead");
    } catch (IOException e) {
      LOGGER.error("stdout reading failed.", e);
    }
    try {
      if (stream != null) {
        stream.close();
      }
    } catch (IOException e) {
      LOGGER.warn("stdout closing failed", e);
    }
  }

  private void getStdoutContentIfAvailable(byte[] buffer, ByteArrayOutputStream os, int nb)
      throws IOException {
    try {
      while (nb >= 0) {
        os.write(buffer, 0, nb);
        String osString = os.toString();
        int indexNewline = osString.indexOf('\n');
        if (indexNewline > 0) {
          while (indexNewline >= 0) {
            commitOutputLine(osString.substring(0, indexNewline));
            osString = osString.substring(indexNewline + 1);
            indexNewline = osString.indexOf('\n');
          }
          os.reset();
          os.write(osString.getBytes());
        }
        if (processAlive()) {
          nb = stream.read(buffer);
        }
      }
    } catch (IOException ioe) {
      LOGGER.warn("stdout reading failed.", ioe);
    }
  }

  protected abstract void commitOutputLine(String osString);

  private boolean processAlive() {
    Process process = processRef.get();
    boolean alive = false;
    if (process != null) {
      try {
        process.exitValue();
        alive = false;
      } catch (IllegalThreadStateException e) {
        LOGGER.debug("Process is still alive.", e);
        alive = true;
      }
    }
    return alive;
  }
}
