/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils.process;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import org.opentestfactory.utils.AmnesicStringBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is used to monitor streams.
 *
 * @author bsiri
 * @author edegenetais
 */
public final class StreamMuncher implements Runnable {

  private static final Logger LOGGER = LoggerFactory.getLogger(StreamMuncher.class);

  private String streamName = "anonymous";
  private AmnesicStringBuffer buffer;
  private BufferedReader reader;
  private boolean shouldRun = true;

  public StreamMuncher(String streamName, InputStream stream, int bufferSize) {
    this.streamName = streamName;
    buffer = new AmnesicStringBuffer(bufferSize);
    reader = new BufferedReader(new InputStreamReader(stream));
  }

  public void requestStop() {
    shouldRun = false;
  }

  public void start() {
    Thread errMonitor = new Thread(this, streamName + " tail.");
    errMonitor.setDaemon(true);
    errMonitor.start();
  }

  @Override
  public void run() {
    try {
      String buf;

      while (shouldRun) {

        buf = reader.readLine();

        if (buf != null) {
          buffer.append(buf).append("\n");
        }
      }
      if (reader.ready() && reader.read() >= 0) {
        buffer.append("<<stream truncated here!>>");
      }
      reader.close();

    } catch (IOException ex) {
      LOGGER.warn("Failed to access {} contents.", streamName, ex);
      try {
        buffer.append(streamName + " : could not access contents.");
      } catch (IOException e) {
        LOGGER.warn(
            "Swallowing IOException, since we know our buffer is RAM based. If you see this message"
                + " there is definitely something rotten in the realm of Denmark !",
            e);
        /*
         * swallow: we known our specific buffer is RAM based, so it
         * cannot throw IOExceptions
         */
      }
    }
  }

  public String getStreamContent() {
    return buffer.toString();
  }
}
