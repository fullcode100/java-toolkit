/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils.shell;

import java.io.File;

/**
 * {@link Platform} implementation used in windows.
 *
 * @author edegenetais
 */
public class WindowsPlatform extends Platform {

  @Override
  public String getPlatformStatementSeparator() {
    return " && ";
  }

  protected String changeIntoInSHellCommand(String localCommand) {
    String escapedInnerCommand = localCommand.replace("\"", "^\"");
    return "cmd /C \"" + escapedInnerCommand + "\"";
  }

  protected String prepareStatement(String query) {
    // we delete the commentaries...
    if (query.trim().startsWith("REM ")) {
      return "";
    } else {
      // we supress the blank
      return query.trim();
    }
  }

  @Override
  protected boolean needsShellOnPlatform(String command) {
    String executable;
    String trimmedCommand = command.trim();
    if (trimmedCommand.trim().startsWith("\"")) {
      int closingDoubleQuote = trimmedCommand.indexOf('\"', 1);
      while (closingDoubleQuote > 0 && trimmedCommand.charAt(closingDoubleQuote - 1) == '\\') {
        closingDoubleQuote = trimmedCommand.indexOf('\"', closingDoubleQuote + 1);
      }
      if (closingDoubleQuote > 0) {
        executable = trimmedCommand.substring(1, closingDoubleQuote);

      } else {
        executable =
            trimmedCommand; // most probably executable not found, but let's let the shell decide
        // and report.
      }
    } else {
      int firstSpace = trimmedCommand.indexOf(" ");
      if (firstSpace > 0) {
        executable = trimmedCommand.substring(0, firstSpace);
      } else {
        executable = trimmedCommand;
      }
    }
    return !new File(executable).exists();
  }
}
