/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils;

import java.io.IOException;

/**
 * That class will eat characters and string, but will only remember the nth last character when
 * asked to restitute the said string. It is purely intended for saving memory, although it will not
 * prevent some garbage collection.
 *
 * @author bsiri
 */
public class AmnesicStringBuffer implements Appendable {

  private StringBuffer buffer = new StringBuffer();

  private int maxSize = 100;

  // value sent when streamlenght variable is set to "full"
  private static final int FULL_STREAMLENGTH = -1;

  public AmnesicStringBuffer() {
    super();
  }

  public AmnesicStringBuffer(int maxSize) {
    super();
    this.maxSize = maxSize;
  }

  public void setMaxSize(int maxSize) {
    if (maxSize < -1) {
      throw new IllegalArgumentException("the max size must be positive or zero");
    }
    this.maxSize = maxSize;
    trimToMaxSize();
  }

  @Override
  public Appendable append(CharSequence arg0) throws IOException {
    buffer.append(arg0);
    trimToMaxSize();
    return this;
  }

  @Override
  public Appendable append(char arg0) throws IOException {
    buffer.append(arg0);
    trimToMaxSize();
    return this;
  }

  @Override
  public Appendable append(CharSequence arg0, int arg1, int arg2) {
    buffer.append(arg0, arg1, arg2);
    trimToMaxSize();
    return this;
  }

  private void trimToMaxSize() {
    if (maxSize != FULL_STREAMLENGTH) {
      int length = buffer.length();
      if (length > maxSize) {
        buffer.delete(0, length - maxSize);
      }
    }
  }

  public String toString() {
    return buffer.toString();
  }
}
