/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.utils.document;

import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public final class DocumentUtils {

  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(DocumentUtils.class);

  private DocumentUtils() {}

  public static Document getDocument(String fileName) throws DocumentBuildingException {
    Document document;
    try {
      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
      factory.setNamespaceAware(true);
      DocumentBuilder builder = factory.newDocumentBuilder();
      document = builder.parse(fileName);
    } catch (ParserConfigurationException e) {
      throw new DocumentBuildingException(
          "The DocumentBuilder could not be created which satisfies the configuration requested.",
          e);
    } catch (IOException e) {
      throw new DocumentBuildingException("The document is not located at the path provided.", e);
    } catch (SAXException e) {
      throw new DocumentBuildingException(
          "Malformed xml document. The test may have been aborted during its execution.", e);
    }
    return document;
  }

  public static List<String> evaluateXPath(Document document, String path) {
    List<String> values = new ArrayList<>();
    try {
      NodeList nodes = getNodes(document, path);
      for (int i = 0; i < nodes.getLength(); i++) {
        values.add(nodes.item(i).getNodeValue());
      }
    } catch (XPathExpressionException e) {
      LOGGER.error("Unexpected XPath error.", e);
    }
    return values;
  }

  public static NodeList getNodes(Document document, String path) throws XPathExpressionException {
    XPathFactory xpathFactory = XPathFactory.newInstance();
    XPath xpath = xpathFactory.newXPath();
    XPathExpression expr = xpath.compile(path);
    return (NodeList) expr.evaluate(document, XPathConstants.NODESET);
  }

  public static String getStringFromDocument(Document document) throws TransformerException {
    DOMSource domSource = new DOMSource(document);
    StringWriter writer = new StringWriter();
    StreamResult result = new StreamResult(writer);
    TransformerFactory tFactory = TransformerFactory.newInstance();
    Transformer transformer = tFactory.newTransformer();
    transformer.transform(domSource, result);
    return writer.toString();
  }
}
