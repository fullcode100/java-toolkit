/**
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.auth;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.MediaType;
import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.mockito.Mockito;
import org.opentestfactory.services.components.TestResourceHelper;

/**
 *
 * @author edegenetais
 */
public class JwtAuthFilterTest {
    private static final TestResourceHelper TEST_RESOURCE_HELPER = new TestResourceHelper(JwtAuthFilterTest.class);
    private static final String ALLOW_INSECURE_AUTHENTICATION_PROPERTY_KEY = "org.opentestfactory.insecure";

    private JwtAuthFilter testee;    
    private AuthConfiguration cfgMock;
    private FilterChain chainMock;
    private HttpServletRequest requestMock;
    private HttpServletResponse responseMock;
    private PrintWriter responseWriterMock;
    
    @Rule
    public TemporaryFolder testCfgFoler=new TemporaryFolder();
    
    @Before
    public void setMocksUp() throws IOException{
        
        cfgMock=Mockito.mock(AuthConfiguration.class);
        Mockito.when(cfgMock.anonymousAllowed()).thenReturn(false);
        
        chainMock=Mockito.mock(FilterChain.class);
        requestMock=Mockito.mock(HttpServletRequest.class);
        responseMock=Mockito.mock(HttpServletResponse.class);
        responseWriterMock=Mockito.mock(PrintWriter.class);
        Mockito.when(responseMock.getWriter()).thenReturn(responseWriterMock);
        
        setTesteeUp();
    }

    private void setTesteeUp() {
        testee = new JwtAuthFilter(cfgMock);
    }
    
    @Test
    public void mustAcceptAnonymousOnIPV4LocalIfCfgAllows() throws IOException, ServletException{
        testForAnonymous("127.0.0.1");
    }
    
    @Test
    public void mustAcceptAnonymousOnIPV6LocalIfCfgDoesAllows() throws IOException, ServletException{
        testForAnonymous("0:0:0:0:0:0:0:1");
    }

    private void testForAnonymous(String address) throws IOException, ServletException {
        Mockito.when(cfgMock.anonymousAllowed()).thenReturn(true);
        //Must reset testee to take the property into account.
        setTesteeUp();
        
        Mockito.when(requestMock.getLocalAddr()).thenReturn(address);
        Mockito.when(requestMock.getHeader("Authorization")).thenReturn(null);
        
        testee.doFilter(requestMock, responseMock, chainMock);
        
        Mockito.verify(chainMock,Mockito.times(1)).doFilter(requestMock, responseMock);
        
        Mockito.verify(responseMock,Mockito.times(0)).setStatus(Mockito.anyInt());
        Mockito.verify(responseMock,Mockito.times(0)).setContentType(Mockito.anyString());
        Mockito.verify(responseWriterMock,Mockito.times(0)).write(Mockito.anyString());
    }
    
    @Test
    public void acceptValidAuthToken() throws IOException, ServletException{
        final File keyFile = this.testCfgFoler.newFile("testkey.pub");
        getTestResourceAsFile(keyFile);
        String token=TEST_RESOURCE_HELPER.getTestResourceAsString("token.jwt");
        Mockito.when(cfgMock.trustedAutorities()).thenReturn(Arrays.asList(keyFile));
        
        Mockito.when(requestMock.getLocalAddr()).thenReturn("192.168.1.42");
        Mockito.when(requestMock.getHeader("Authorization")).thenReturn("Bearer "+token);
        
        testee.doFilter(requestMock, responseMock, chainMock);
        
        Mockito.verify(responseMock,Mockito.times(0)).setStatus(Mockito.anyInt());
        Mockito.verify(responseMock,Mockito.times(0)).setContentType(Mockito.anyString());
        Mockito.verify(responseWriterMock,Mockito.times(0)).write(Mockito.anyString());
    }

    private void getTestResourceAsFile(File destinationFile) throws IOException {
        String pubKey=TEST_RESOURCE_HELPER.getTestResourceAsString("testkey.pub");
        File keyFile=destinationFile;
        try(OutputStream sink=new FileOutputStream(keyFile)){
            IOUtils.write(pubKey.getBytes(), sink);
        }
    }
    
    @Test
    public void mustRejectAnonymousWithJsonIfNotRunningOnLocalhost() throws IOException, ServletException{
        Mockito.when(cfgMock.anonymousAllowed()).thenReturn(true);
        //Must reset testee to take the property into account.
        setTesteeUp();
        
        Mockito.when(requestMock.getLocalAddr()).thenReturn("192.168.1.42");
        Mockito.when(requestMock.getHeader("Authorization")).thenReturn(null);
        
        testee.doFilter(requestMock, responseMock, chainMock);
        
        Mockito.verify(chainMock,Mockito.times(0)).doFilter(requestMock, responseMock);
        Mockito.verify(responseMock,Mockito.times(1)).setStatus(401);
        Mockito.verify(responseMock,Mockito.times(1)).setContentType(MediaType.APPLICATION_JSON);
        Mockito.verify(responseWriterMock,Mockito.times(1)).write(Mockito.anyString());
    }
    
    @Test
    public void must403RejectIfInvalidHeader() throws IOException, ServletException{
        Mockito.when(requestMock.getLocalAddr()).thenReturn("192.168.1.42");
        Mockito.when(requestMock.getHeader("Authorization")).thenReturn("Dunno what that auth scheme is!");
        
        testee.doFilter(requestMock, responseMock, chainMock);
        
        Mockito.verify(chainMock,Mockito.times(0)).doFilter(requestMock, responseMock);
        Mockito.verify(responseMock,Mockito.times(1)).setStatus(403);
        Mockito.verify(responseMock,Mockito.times(1)).setContentType(MediaType.APPLICATION_JSON);
        Mockito.verify(responseWriterMock,Mockito.times(1)).write(Mockito.anyString());
    }
    
    @Test
    public void must403RejectIfInvalidToken() throws IOException, ServletException{
        
        Mockito.when(requestMock.getLocalAddr()).thenReturn("192.168.1.42");
        final File keyFile = this.testCfgFoler.newFile("testkey.pub");
        getTestResourceAsFile(keyFile);
        Mockito.when(cfgMock.trustedAutorities()).thenReturn(Arrays.asList(keyFile));
        Mockito.when(requestMock.getHeader("Authorization")).thenReturn("Bearer invalid-token");
        
        testee.doFilter(requestMock, responseMock, chainMock);
        
        Mockito.verify(chainMock,Mockito.times(0)).doFilter(requestMock, responseMock);
        Mockito.verify(responseMock,Mockito.times(1)).setStatus(403);
        Mockito.verify(responseMock,Mockito.times(1)).setContentType(MediaType.APPLICATION_JSON);
        Mockito.verify(responseWriterMock,Mockito.times(1)).write(Mockito.anyString());
    }
    
}
