/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.logger;

import java.util.Arrays;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;

/** @author edegenetais */
public class WorkflowContextTest {

  @Test(expected = NullPointerException.class)
  public void noContextIfNoWorkflowId() {
    new WorkflowContext(WorkflowEventTestHelper.nonWorkflowMessage());
  }

  @Test
  public void noJobIdIfNotFromWorkflowEvent() {
    WorkflowContext testee =
        new WorkflowContext(WorkflowEventTestHelper.getEventWithWorkflowIdOnly("wf-id-1"));
    Assert.assertFalse(testee.hasJobId());
  }

  @Test
  public void useEventJobIdIfAvailable() {
    final String evjobid1 = "ev-job-id-1";
    WorkflowEvent eventWithWorkflowAndJobId =
        WorkflowEventTestHelper.getEventWithWorkflowIdAndJobId("wf-id-1", evjobid1);
    WorkflowContext testee = new WorkflowContext(eventWithWorkflowAndJobId);
    Assert.assertTrue(testee.hasJobId());
    Assert.assertEquals(evjobid1, testee.jobId());
  }

  @Test
  public void useEventJobOriginIfAvailable() {
    final List<String> jobOrigin = Arrays.asList("job-origin-id-1");
    WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithJobOrigin("wf-id-1", "ev-job-id-1", jobOrigin);
    WorkflowContext testee = new WorkflowContext(eventWithWorkflowIdOnly);
    Assert.assertTrue(testee.hasJobOrigin());
    Assert.assertEquals(jobOrigin, testee.jobOrigin());
  }

  @Test
  public void tellIfIHaveNoJobOrigin() {
    WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithWorkflowIdAndJobId("wf-id-1", "ev-job-id-1");
    WorkflowContext testee = new WorkflowContext(eventWithWorkflowIdOnly);
    Assert.assertFalse(testee.hasJobOrigin());
  }

  @Test
  public void tellIfIHaveNoStepOrigin() {
    WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithWorkflowIdAndJobId("wf-id-1", "ev-job-id-1");
    WorkflowContext testee = new WorkflowContext(eventWithWorkflowIdOnly);
    Assert.assertFalse(testee.hasStepOrigin());
  }

  @Test
  public void useEventStepOriginIfAvailable() {
    final List<String> stepOrigin = Arrays.asList("step-origin-id");
    WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithWorkflowIdAndStepOrigin(
            "wf-id-1", "ev-job-id-1", Arrays.asList("job-origin-id-1"), "step-id-1", stepOrigin);
    WorkflowContext testee = new WorkflowContext(eventWithWorkflowIdOnly);
    Assert.assertTrue(testee.hasStepOrigin());
    Assert.assertEquals(stepOrigin, testee.stepOrigin());
  }
}
