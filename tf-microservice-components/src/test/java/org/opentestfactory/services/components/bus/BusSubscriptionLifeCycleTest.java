/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import javax.ws.rs.ClientErrorException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.services.components.bus.subscription.Subscription;
import org.opentestfactory.services.components.bus.subscription.SubscriptionResult;
import org.opentestfactory.services.components.bus.subscription.SubscriptionResultTest;

/** @author edegenetais */
public class BusSubscriptionLifeCycleTest {

  private BusSubscriptionsLifeCycle.SubscriptionCfg cfgMock;
  private BusClientFactory busClientFactoryMock;
  private BusClient busClientMock;
  private BusSubscriptionsLifeCycle testee;

  @Before
  public void setUp() {
    cfgMock = Mockito.mock(BusSubscriptionsLifeCycle.SubscriptionCfg.class);
    busClientMock = Mockito.mock(BusClient.class);

    busClientFactoryMock = Mockito.mock(BusClientFactory.class);
    Mockito.when(busClientFactoryMock.getBusClient()).thenReturn(busClientMock);
  }

  @Test
  public void oneSubscriptionSpecTriggersOneSubscriptionPublication() throws MalformedURLException {
    final Subscription subscription =
        Subscription.withEndpoint("testInbox", new URL("http://localhost:8665/inbox"));
    Mockito.when(cfgMock.requiredSubscriptions()).thenReturn(Arrays.asList(subscription));
    Mockito.when(busClientMock.subscribe(subscription))
        .thenReturn(SubscriptionResultTest.createSubscriptionResult());

    testee = new BusSubscriptionsLifeCycle(cfgMock, busClientFactoryMock);

    Mockito.verify(busClientMock, Mockito.times(1)).subscribe(subscription);
  }

  @Test
  public void twoSubscriptionSpecsTriggerTwoSubscriptionPublications()
      throws MalformedURLException {
    final Subscription subscription =
        Subscription.withEndpoint("testInbox", new URL("http://localhost:8665/inbox"));
    final Subscription secondSubscription =
        Subscription.withEndpoint("otherInbox", new URL("http://localhost:8665/otherInbox"));
    Mockito.when(cfgMock.requiredSubscriptions())
        .thenReturn(Arrays.asList(subscription, secondSubscription));
    Mockito.when(busClientMock.subscribe(subscription))
        .thenReturn(SubscriptionResultTest.createSubscriptionResult());
    Mockito.when(busClientMock.subscribe(secondSubscription))
        .thenReturn(SubscriptionResultTest.createSubscriptionResult());

    testee = new BusSubscriptionsLifeCycle(cfgMock, busClientFactoryMock);

    Mockito.verify(busClientMock, Mockito.times(1)).subscribe(subscription);
    Mockito.verify(busClientMock, Mockito.times(1)).subscribe(secondSubscription);
  }

  @Test(expected = InvalidOtfMessageException.class)
  public void respondWithInvalidOtfMessageIfJsonFailureStatusOnSubscription()
      throws MalformedURLException {
    final Subscription subscription =
        Subscription.withEndpoint("testInbox", new URL("http://localhost:8665/inbox"));
    Mockito.when(cfgMock.requiredSubscriptions()).thenReturn(Arrays.asList(subscription));
    Mockito.when(busClientMock.subscribe(subscription))
        .thenReturn(SubscriptionResultTest.createSubscriptionFailure());

    testee = new BusSubscriptionsLifeCycle(cfgMock, busClientFactoryMock);
  }

  @Test(expected = InvalidOtfMessageException.class)
  public void respondWithInvalidOtfMessageIfJsonStatusClientErrorOnSubscription()
      throws MalformedURLException {
    final Subscription subscription =
        Subscription.withEndpoint("testInbox", new URL("http://localhost:8665/inbox"));
    Mockito.when(cfgMock.requiredSubscriptions()).thenReturn(Arrays.asList(subscription));
    ClientErrorException errorMock =
        buildErrorMock(
            MediaType.APPLICATION_JSON_TYPE,
            SubscriptionResultTest.createSubscriptionFailure(),
            SubscriptionResult.class);
    Mockito.when(busClientMock.subscribe(subscription)).thenThrow(errorMock);

    testee = new BusSubscriptionsLifeCycle(cfgMock, busClientFactoryMock);
  }

  @Test(expected = ClientErrorException.class)
  public void keepThrownClientExceptionIfJsonStatusClientErrorOnSubscription()
      throws MalformedURLException {
    final Subscription subscription =
        Subscription.withEndpoint("testInbox", new URL("http://localhost:8665/inbox"));
    Mockito.when(cfgMock.requiredSubscriptions()).thenReturn(Arrays.asList(subscription));
    ClientErrorException errorMock =
        buildErrorMock(MediaType.TEXT_HTML_TYPE, "Gotcha!", String.class);
    Mockito.when(busClientMock.subscribe(subscription)).thenThrow(errorMock);

    testee = new BusSubscriptionsLifeCycle(cfgMock, busClientFactoryMock);
  }

  @Test
  public void unsubscribeOnceAfterOneSubscription() throws MalformedURLException {
    final Subscription subscription =
        Subscription.withEndpoint("testInbox", new URL("http://localhost:8665/inbox"));
    Mockito.when(cfgMock.requiredSubscriptions()).thenReturn(Arrays.asList(subscription));
    final SubscriptionResult createSubscriptionResult =
        SubscriptionResultTest.createSubscriptionResult();
    Mockito.when(busClientMock.subscribe(subscription)).thenReturn(createSubscriptionResult);

    testee = new BusSubscriptionsLifeCycle(cfgMock, busClientFactoryMock);
    testee.unsubscribe();

    Mockito.verify(busClientMock, Mockito.times(1)).unsubscribe(createSubscriptionResult.uuid());
  }

  private <CT> ClientErrorException buildErrorMock(
      MediaType mediaType, CT contentObject, Class<CT> contentClass) {
    final ClientErrorException errorMock = Mockito.mock(ClientErrorException.class);
    final Response responseMock = Mockito.mock(Response.class);
    Mockito.when(responseMock.getStatus()).thenReturn(422);
    Mockito.when(responseMock.getMediaType()).thenReturn(mediaType);
    Mockito.when(responseMock.readEntity(contentClass)).thenReturn(contentObject);
    Mockito.when(errorMock.getResponse()).thenReturn(responseMock);
    return errorMock;
  }
}
