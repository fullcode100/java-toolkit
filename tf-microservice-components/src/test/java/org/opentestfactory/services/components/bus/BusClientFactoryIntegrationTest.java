/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import javax.ws.rs.HttpMethod;
import javax.ws.rs.NotAuthorizedException;
import javax.ws.rs.core.MediaType;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;
import org.mockserver.model.HttpResponse;
import org.mockserver.model.JsonBody;
import org.opentestfactory.messages.OTFMessage;
import org.opentestfactory.messages.Status;
import org.opentestfactory.services.components.TestResourceHelper;

/**
 * Integration test for the bus client factpory & produced bus client (against an eventbus mock).
 *
 * @author edegenetais
 */
public class BusClientFactoryIntegrationTest {
  private static final TestResourceHelper RESOURCE_HELPER =
      new TestResourceHelper(BusClientFactoryIntegrationTest.class);

  private static int MOCK_PORT = 5000;
  private static ClientAndServer httpMock;

  @BeforeClass
  public static void createMock() {
    httpMock = ClientAndServer.startClientAndServer(MOCK_PORT);
  }

  @Before
  public void resetMock() {
    if (!httpMock.isRunning()) {
      createMock();
    }
    httpMock.reset();
  }

  @Test
  public void successfullPublish() throws MalformedURLException, IOException {
    BusClient testBusClient = setTestBusClientUp(null);
    mockServerRespondJsonWhenPublication("subscriptionCreatedStatus.json", 201, null);
    OTFMessage message = new GeneratorResult("opentestfactory.org/v1alpha1");
    PublicationStatus commendEventStatus = testBusClient.publishEvent(message);
    Assert.assertEquals(
        "Oops not expected status", Status.StatusValue.Success, commendEventStatus.getStatus());
  }

  @Test(expected = NotAuthorizedException.class)
  public void unauthorizedPublishFails() throws MalformedURLException, IOException {
    BusClient testBusClient = setTestBusClientUp(null);
    mockServerRespondJsonWhenPublication("subscriptionNotAuthorizedStatus.json", 401, null);
    OTFMessage message = new GeneratorResult("opentestfactory.org/v1alpha1");
    testBusClient.publishEvent(message);
  }

  @Test(expected = NotAuthorizedException.class)
  public void badCredentialsPublishFails() throws MalformedURLException, IOException {
    final String invalidtoken = "invalid-token";
    BusClient testee = setTestBusClientUp(invalidtoken);
    mockServerRespondJsonWhenPublication("subscriptionBadToken.json", 401, invalidtoken);
    OTFMessage message = new GeneratorResult("opentestfactory.org/v1alpha1");
    testee.publishEvent(message);
  }

  @Test
  public void goodCredentialsPublishSucceeds() throws MalformedURLException, IOException {
    final String validtoken = "valid-token";
    BusClient testee = setTestBusClientUp(validtoken);

    mockServerRespondJsonWhenPublication("subscriptionCreatedStatus.json", 201, validtoken);
    mockServerRespondJsonWhenPublication("subscriptionNotAuthorizedStatus.json", 401, null);

    OTFMessage message = new GeneratorResult("opentestfactory.org/v1alpha1");
    PublicationStatus commendEventStatus = testee.publishEvent(message);
    Assert.assertEquals(
        "Oops not expected status", Status.StatusValue.Success, commendEventStatus.getStatus());
  }

  @AfterClass
  public static void tearMockDown() {
    httpMock.stop();
  }

  private void mockServerRespondJsonWhenPublication(
      final String expectedJson, final int expectedHttpCode, final String validtoken)
      throws IOException {
    mockServerRespondWithJson(
        expectedJson, expectedHttpCode, HttpMethod.POST, validtoken, "/publications");
  }

  private void mockServerRespondWithJson(
      String resourceName,
      int statusCode,
      String expectedMethod,
      String expectedAuthToken,
      String expectedPath)
      throws IOException {

    String mockOkWfCreatedStatusResponse = RESOURCE_HELPER.getTestResourceAsString(resourceName);
    final String publications = expectedPath;

    HttpRequest expectedRequest =
        HttpRequest.request().withMethod(expectedMethod).withPath(publications);
    if (expectedAuthToken != null) {
      expectedRequest = expectedRequest.withHeader("Authorization", "Bearer " + expectedAuthToken);
    }
    httpMock
        .when(expectedRequest)
        .respond(
            HttpResponse.response()
                .withStatusCode(statusCode)
                .withHeader("Content-Type", MediaType.APPLICATION_JSON)
                .withBody(
                    JsonBody.json(
                        mockOkWfCreatedStatusResponse, TestResourceHelper.UTF_8_CHARSET)));
  }

  private BusClient setTestBusClientUp(String authToken) throws MalformedURLException {
    BusClient testee =
        new BusClientFactory(
                new BusClientFactoryConfiguration(
                    new URL("http://localhost:" + MOCK_PORT), authToken))
            .getBusClient();
    return testee;
  }

  private static class GeneratorResult extends OTFMessage {

    public GeneratorResult(String apiVersion) {
      super(apiVersion);
    }
  }
}
