/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.worker;

import org.junit.Test;
import org.opentestfactory.messages.OTFMessage;
import org.opentestfactory.messages.OTFMessageAPI;
import org.opentestfactory.messages.Status;
import org.opentestfactory.messages.WorkerJobComplete;
import org.opentestfactory.messages.WorkerJobStarted;
import org.opentestfactory.services.components.bus.BusClient;
import org.opentestfactory.services.components.bus.PublicationStatus;
import org.opentestfactory.services.components.bus.subscription.Subscription;
import org.opentestfactory.services.components.bus.subscription.SubscriptionResult;

import java.util.Objects;

import static org.junit.Assert.*;

public class WorkerNotifierTest {

  private static class BusMock implements BusClient {

    private String workflowStartedUUID;
    private String workflowCompletedUUID;

    @Override
    public PublicationStatus publishEvent(OTFMessage event) {
      if (event instanceof WorkerJobStarted) {
        workflowStartedUUID = ((WorkerJobStarted) event).workflowId();
      }
      else if (event instanceof WorkerJobComplete) {
        workflowCompletedUUID = ((WorkerJobComplete) event).workflowId();
      } else {
        throw new UnsupportedOperationException();
      }
      PublicationStatus status = new PublicationStatus(OTFMessageAPI.CURRENT_API_VERSION, "Status");
      status.setStatus(Status.StatusValue.Success);
      return status;
    }

    @Override
    public SubscriptionResult subscribe(Subscription subscription) {
      throw new UnsupportedOperationException();
    }

    @Override
    public void unsubscribe(String uuid) {
      throw new UnsupportedOperationException();
    }

    public boolean workerNotificationEmitted() {
      return Objects.nonNull(workflowStartedUUID)
          && Objects.nonNull(workflowCompletedUUID)
          && workflowStartedUUID.equals(workflowCompletedUUID);
    }
  }

  @Test
  public void shouldDoInWorker() {
    BusMock busMock = new BusMock();
    WorkerNotifier workerNotifier = new WorkerNotifier(busMock, "a00001", "wf1");
    workerNotifier.doInWorker(() -> {});
    assertTrue(busMock.workerNotificationEmitted());
  }

  @Test
  public void shouldPublishNotificationWhenExceptionOccurs() {
    BusMock busMock = new BusMock();
    WorkerNotifier workerNotifier = new WorkerNotifier(busMock, "a00001", "wf1");
    assertThrows(
        NullPointerException.class,
        () ->
            workerNotifier.doInWorker(
                () -> {
                  throw new NullPointerException("powned");
                }));
    assertTrue(busMock.workerNotificationEmitted());
  }

  @Test
  public void notifyWorkerStarted() {
    BusMock busMock = new BusMock();
    WorkerNotifier workerNotifier = new WorkerNotifier(busMock, "a00001", "wf1");
    workerNotifier.notifyWorkerStarted();
    assertEquals("a00001", busMock.workflowStartedUUID);
  }

  @Test
  public void notifyWorkerCompleted() {
    BusMock busMock = new BusMock();
    WorkerNotifier workerNotifier = new WorkerNotifier(busMock, "a00001", "wf1");
    workerNotifier.notifyWorkerCompleted();
    assertEquals("a00001", busMock.workflowCompletedUUID);
  }
}
