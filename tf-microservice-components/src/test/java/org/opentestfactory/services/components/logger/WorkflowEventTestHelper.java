/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.logger;

import java.util.List;
import org.opentestfactory.messages.OTFMessageAPI;

/**
 * TestHelper for tests that use WorkflowEvent instances.
 *
 * <p>NB : if some unit tests are written for WorkflowEvent, rename this class as WorkflowEventTest
 * and write unit tests in there.
 *
 * @author edegenetais
 */
public class WorkflowEventTestHelper {

  public static WorkflowEvent getEventWithWorkflowIdOnly(String id) {
    WorkflowEvent event = new WorkflowEvent(OTFMessageAPI.CURRENT_API_VERSION);
    event.getMetadata().put("workflow_id", id);
    return event;
  }

  public static WorkflowEvent getEventWithWorkflowIdAndJobId(
      final String workflowId, final String jobId) {
    final WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithWorkflowIdOnly(workflowId);
    eventWithWorkflowIdOnly.getMetadata().put("job_id", jobId);
    return eventWithWorkflowIdOnly;
  }

  public static WorkflowEvent nonWorkflowMessage() {
    return new WorkflowEvent(OTFMessageAPI.CURRENT_API_VERSION);
  }

  public static WorkflowEvent getEventWithJobOrigin(
      final String workflowId, final String evjobid1, final List<String> jobOrigin) {
    WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithWorkflowIdAndJobId(workflowId, evjobid1);
    eventWithWorkflowIdOnly.getMetadata().put("job_origin", jobOrigin);
    return eventWithWorkflowIdOnly;
  }

  public static WorkflowEvent getEventWithWorkflowIdAndStepOrigin(
      final String workflowId,
      final String jobId,
      final List<String> jobOrigin,
      final String stepId,
      final List<String> stepOrigin) {
    WorkflowEvent eventWithWorkflowIdOnly =
        WorkflowEventTestHelper.getEventWithJobOrigin(workflowId, jobId, jobOrigin);
    eventWithWorkflowIdOnly.getMetadata().put("step_id", stepId);
    eventWithWorkflowIdOnly.getMetadata().put("step_origin", stepOrigin);
    return eventWithWorkflowIdOnly;
  }
}
