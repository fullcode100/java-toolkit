/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.auth;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.crypto.RSASSASigner;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.PrivateKey;
import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.junit.Ignore;
import org.junit.Test;

/** @author edegenetais */
public class TokenGenTest {

  // FIXME : change this into a java token generator utility.
  @Ignore("This is a pseudo test, shorthand for a token generator. It should be refactored as such")
  @Test
  public void createSignedToken() throws FileNotFoundException, IOException, JOSEException {
    try (FileReader privateKeyReader = new FileReader("/run/user/1000/testkey"); ) {
      PEMParser parser2 = new PEMParser(privateKeyReader);
      JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
      PEMKeyPair keyPair = (PEMKeyPair) parser2.readObject();

      PrivateKeyInfo privKeyInfo = keyPair.getPrivateKeyInfo();
      PrivateKey privateKeyInfo = converter.getPrivateKey(privKeyInfo);

      RSASSASigner signer = new RSASSASigner(privateKeyInfo);

      JWTClaimsSet claimSet =
          new JWTClaimsSet.Builder()
              .subject("Alice")
              .issuer("www.example.com")
              .expirationTime(
                  Date.from(Instant.now().plus(Duration.ofDays(365).multipliedBy(10000))))
              .build();

      SignedJWT token = new SignedJWT(new JWSHeader.Builder(JWSAlgorithm.RS256).build(), claimSet);

      token.sign(signer);
      System.out.println("Token:" + token.serialize());
    }
  }
}
