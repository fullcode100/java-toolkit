/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.jersey;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.ws.rs.ext.ReaderInterceptorContext;
import org.glassfish.jersey.server.ResourceConfig;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.services.components.TestResourceHelper;
import org.opentestfactory.services.components.validation.BadValidationSetupException;
import org.opentestfactory.services.components.validation.JsonSchemaContentValidator;
import org.opentestfactory.services.components.validation.testhelpers.TestInbox;

/** @author edegenetais */
public class MessageContentAnalyzerInterceptorTest {
  private static final TestResourceHelper TEST_RESOURCE_HELPER =
      new TestResourceHelper(MessageContentAnalyzerInterceptorTest.class);

  private ReaderInterceptorContext contextMock;
  private ResourceConfig mockCfg;

  @Before
  public void setUp() {

    contextMock = Mockito.mock(ReaderInterceptorContext.class);

    // Can't mock that ResourceConfig (something final somewhere !) and mocking this SILENTLY fails
    // @#!
    mockCfg = new ResourceConfig();
    mockCfg.register(TestInbox.class);
  }

  @Test
  public void proceedOnCorrectContent() throws IOException {
    try (InputStream contentStream =
        getClass().getResourceAsStream("correctValidationTestMessage.json")) {
      Mockito.when(contextMock.getInputStream()).thenReturn(contentStream);
      new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);

      Mockito.verify(contextMock, Mockito.times(1)).proceed();
    }
  }

  @Test
  public void properlyDetectFirstAnnotation() throws IOException {
    try (InputStream contentStream =
        getClass().getResourceAsStream("correctValidationTestMessageV1beta1.json")) {
      Mockito.when(contextMock.getInputStream()).thenReturn(contentStream);
      new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);

      Mockito.verify(contextMock, Mockito.times(1)).proceed();
    }
  }

  @Test
  public void properlyDetectSecondAnnotation() throws IOException {
    try (InputStream contentStream =
        getClass().getResourceAsStream("correctValidationTestMessageV1beta2.json")) {
      Mockito.when(contextMock.getInputStream()).thenReturn(contentStream);
      new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);

      Mockito.verify(contextMock, Mockito.times(1)).proceed();
    }
  }

  @Test
  public void dontConsumeContentIfCorrect() throws IOException {
    String envelope =
        TEST_RESOURCE_HELPER.getTestResourceAsString("correctValidationTestMessage.json");

    Mockito.when(contextMock.getInputStream())
        .thenReturn(
            new ByteArrayInputStream(envelope.getBytes(TEST_RESOURCE_HELPER.UTF_8_CHARSET)));

    new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);

    Mockito.verify(contextMock, Mockito.times(1)).setInputStream(Mockito.any(InputStream.class));
  }

  @Test(expected = JsonSchemaContentValidator.UnexpectedEventKindException.class)
  public void throwUnexpectedEventExceptionIfSchemaKindNotExpected() throws IOException {
    String envelope = TEST_RESOURCE_HELPER.getTestResourceAsString("notAcceptedEvent.json");

    Mockito.when(contextMock.getInputStream())
        .thenReturn(
            new ByteArrayInputStream(envelope.getBytes(TEST_RESOURCE_HELPER.UTF_8_CHARSET)));

    new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);
  }

  @Test(expected = JsonSchemaContentValidator.UnexpectedEventKindException.class)
  public void throwUnexpectedEventExceptionIfKindInOtherNamespaceThanExpectedKind()
      throws IOException {
    String envelope =
        TEST_RESOURCE_HELPER.getTestResourceAsString("unexpectedOtherNamespaceSameKindEvent.json");

    Mockito.when(contextMock.getInputStream())
        .thenReturn(
            new ByteArrayInputStream(envelope.getBytes(TEST_RESOURCE_HELPER.UTF_8_CHARSET)));

    new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);
  }

  @Test(expected = BadValidationSetupException.class)
  public void throwBadValidationSetupExceptionIfNoSchemaForThisExpectedKind() throws IOException {
    String envelope = TEST_RESOURCE_HELPER.getTestResourceAsString("missingSchemaTestMessage.json");

    Mockito.when(contextMock.getInputStream())
        .thenReturn(
            new ByteArrayInputStream(envelope.getBytes(TEST_RESOURCE_HELPER.UTF_8_CHARSET)));

    new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);
  }

  @Test(expected = InvalidOtfMessageException.class)
  public void throwInvalidOtfMessageExceptionIfNotSchemaCompliant() throws IOException {
    String envelope =
        TEST_RESOURCE_HELPER.getTestResourceAsString("notValidValidationTestMessage.json");

    Mockito.when(contextMock.getInputStream())
        .thenReturn(
            new ByteArrayInputStream(envelope.getBytes(TEST_RESOURCE_HELPER.UTF_8_CHARSET)));

    new MessageContentAnalyzerInterceptor(mockCfg).aroundReadFrom(contextMock);
  }
}
