/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.logging;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.UUID;
import javax.ws.rs.core.MediaType;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;
import org.mockserver.model.HttpResponse;
import org.mockserver.model.JsonBody;
import org.mockserver.verify.VerificationTimes;
import org.opentestfactory.services.components.TestResourceHelper;
import org.opentestfactory.services.components.logger.WorkflowAppender;
import org.opentestfactory.services.components.logger.WorkflowContext;

/** @author edegenetais */
public class WorkflowAppenderTest {
  private static final TestResourceHelper RESOURCE_HELPER =
      new TestResourceHelper(WorkflowAppenderTest.class);

  private static int MOCK_PORT = 5000;
  private static ClientAndServer httpMock;
  private static final String MOCK_PATH = "/bus4appender/";
  private String notificationPath;
  private HttpRequest expectedRequest;

  @BeforeClass
  public static void createMock() {
    httpMock = ClientAndServer.startClientAndServer(MOCK_PORT);
  }

  @Before
  public void resetMock() throws IOException {
    if (!httpMock.isRunning()) {
      createMock();
    }
    httpMock.reset();
    notificationPath = MOCK_PATH + UUID.randomUUID();
    expectedRequest =
        HttpRequest.request().withMethod("POST").withPath(notificationPath + "/publications");
    httpMock
        .when(expectedRequest)
        .respond(
            HttpResponse.response()
                .withStatusCode(200)
                .withBody(
                    JsonBody.json(
                        RESOURCE_HELPER.getTestResourceAsString("publicationStatus.json")))
                .withHeader("Content-Type", MediaType.APPLICATION_JSON));
  }

  @AfterClass
  public static void tearMockDown() {
    httpMock.stop();
  }

  @Test
  public void tolerateNullToken() {
    new WorkflowAppender().setBusToken(null);
  }

  @Test
  public void doNotPublishWhenNotInWorkflowContext() throws MalformedURLException {
    WorkflowAppender testee = new WorkflowAppender();
    testee.setBusBaseUrl("http://localhost:" + MOCK_PORT + notificationPath);

    WorkflowContext.cleanWorkflowContextUp(); // just in case
    // testee.doAppend("Message");
    testee.doAppend("Message");
    httpMock.verify(expectedRequest, VerificationTimes.exactly(0));
  }

  @Test
  public void publishWhenInWorkflowContext() throws MalformedURLException {

    WorkflowAppenderTestee testee = new WorkflowAppenderTestee();
    testee.setBusBaseUrl("http://localhost:" + MOCK_PORT + notificationPath);

    WorkflowContext.registerWorflowContext(new WorkflowContext(UUID.randomUUID().toString()));
    testee.append("Message");

    httpMock.verify(expectedRequest, VerificationTimes.once());

    WorkflowContext.cleanWorkflowContextUp();
  }

  private static class WorkflowAppenderTestee extends WorkflowAppender {
    public void append(Object message) {
      super.append(message);
    }
  }
}
