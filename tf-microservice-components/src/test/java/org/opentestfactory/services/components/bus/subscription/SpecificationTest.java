/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus.subscription;

import java.net.MalformedURLException;
import java.net.URL;
import org.junit.Assert;
import org.junit.Test;

/** @author edegenetais */
public class SpecificationTest {
  @Test
  public void testInitialWithMatchKind() throws MalformedURLException {
    Specification spec =
        new Specification(new URL("https://localhost:1234")).withMatchKind("OfMagic");

    Assert.assertEquals("OfMagic", spec.selector.matchKind);
  }

  @Test
  public void testAddingMatchKind() throws MalformedURLException {
    Specification spec =
        new Specification(new URL("https://localhost:1234"))
            .withMatchField("magnetic", "1Tesla")
            .withMatchKind("OfMagic");

    Assert.assertEquals("OfMagic", spec.selector.matchKind);
  }

  @Test
  public void testInitialWithMatchLabel() throws MalformedURLException {
    Specification spec =
        new Specification(new URL("https://localhost:1234")).withMatchLabel("label", "rouge");

    Assert.assertEquals("rouge", spec.selector.matchLabels.get("label"));
  }

  @Test
  public void testAddingWithMatchLabel() throws MalformedURLException {
    Specification spec =
        new Specification(new URL("https://localhost:1234"))
            .withMatchKind("OfMagic")
            .withMatchLabel("label", "rouge");

    Assert.assertEquals("rouge", spec.selector.matchLabels.get("label"));
  }

  @Test
  public void testInitialWithMatchField() throws MalformedURLException {
    Specification spec =
        new Specification(new URL("https://localhost:1234")).withMatchField("magnetic", "1Tesla");

    Assert.assertEquals("1Tesla", spec.selector.matchFields.get("magnetic"));
  }

  @Test
  public void testAddingWithMatchField() throws MalformedURLException {
    Specification spec =
        new Specification(new URL("https://localhost:1234"))
            .withMatchKind("OfMagic")
            .withMatchField("magnetic", "1Tesla");

    Assert.assertEquals("1Tesla", spec.selector.matchFields.get("magnetic"));
  }
}
