/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus.subscription;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Test;
import org.opentestfactory.messages.Status;

/** @author edegenetais */
public class SubscriptionResultTest {

  public static SubscriptionResult createSubscriptionResult(String uuid) {
    final SubscriptionResult subscriptionResult = new SubscriptionResult("v1", "Status");
    subscriptionResult.setStatus(Status.StatusValue.Success);
    Map<String, String> detailsMap = new HashMap<>(1);
    detailsMap.put("uuid", uuid);
    subscriptionResult.setDetails(detailsMap);
    return subscriptionResult;
  }

  public static SubscriptionResult createSubscriptionResult() {
    return SubscriptionResultTest.createSubscriptionResult(UUID.randomUUID().toString());
  }

  /** SubscriptionStatus instances are value objects, let's enforce that ! */
  @Test
  public void testSameDataSubscriptionStatusesAreEquals() {
    final String uuid = UUID.randomUUID().toString();
    SubscriptionResult status1 = createSubscriptionResult(uuid);
    SubscriptionResult status2 = createSubscriptionResult(uuid);

    Assert.assertEquals(
        "Same data subscription result should be equals (value semantics)", status1, status2);
  }

  @Test
  public void equalsHaveSameHashcode() {
    final String uuid = UUID.randomUUID().toString();
    SubscriptionResult status1 = createSubscriptionResult(uuid);
    SubscriptionResult status2 = createSubscriptionResult(uuid);

    Assert.assertEquals(
        "This test is not valid of compared instances are not equals().", status1, status2);
    Assert.assertEquals(
        "The hashcode contract requires that equals objects have the same hascode.",
        status1.hashCode(),
        status2.hashCode());
  }

  public static SubscriptionResult createSubscriptionFailure() {
    final SubscriptionResult subscriptionResult = SubscriptionResultTest.createSubscriptionResult();
    subscriptionResult.setCode(422);
    subscriptionResult.setMessage("Invalid subscription");
    final HashMap<String, String> details = new HashMap<>(1);
    details.put("errorReport", "Invalid subscription");
    subscriptionResult.setDetails(details);
    subscriptionResult.setStatus(Status.StatusValue.Failure);
    return subscriptionResult;
  }
}
