/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.repository;

import java.util.Objects;
import org.junit.Assert;
import org.junit.Test;
import org.opentestfactory.services.components.domain.Identified;

public class InMemoryRepositoryTest {

  @Test
  public void shouldSaveAndFind() {
    InMemoryRepository<Dummy> repository = new DummyRepository();
    Dummy dummy1 = new Dummy("1", "toto");
    Dummy dummy2 = new Dummy("2", "titi");
    repository.save(dummy1);
    repository.save(dummy2);
    Assert.assertEquals(dummy1, repository.findById("1").get());
    Assert.assertEquals("toto", repository.findById("1").get().name);
    Assert.assertEquals(dummy2, repository.findById("2").get());
  }

  @Test
  public void shouldRefuseInvalidAggregates() {
    InMemoryRepository<Dummy> repository = new DummyRepository();
    Dummy dummy1 = new Dummy("   ", "toto");
    Dummy dummy2 = new Dummy(null, "titi");
    Assert.assertThrows(IllegalArgumentException.class, () -> repository.save(dummy1));
    Assert.assertThrows(IllegalArgumentException.class, () -> repository.save(dummy2));
    Assert.assertThrows(NullPointerException.class, () -> repository.save(null));
  }

  @Test
  public void shouldReplaceWhenUpdate() {
    InMemoryRepository<Dummy> repository = new DummyRepository();
    Dummy dummy1 = new Dummy("1", "toto");
    Dummy dummy1Updated = new Dummy("1", "titi");
    repository.save(dummy1);
    Assert.assertEquals(dummy1, repository.findById("1").get());
    repository.save(dummy1Updated);
    Assert.assertEquals(dummy1Updated, repository.findById("1").get());
    Assert.assertNotSame(dummy1, repository.findById("1").get());
  }

  public static class Dummy implements Identified<String> {

    private final String id;
    private final String name;

    public Dummy(String id, String name) {
      this.id = id;
      this.name = name;
    }

    @Override
    public String getId() {
      return id;
    }

    public String getName() {
      return name;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      Dummy dummy = (Dummy) o;
      return id.equals(dummy.id);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id);
    }
  }

  public static class DummyRepository extends InMemoryRepository<Dummy> {}
}
