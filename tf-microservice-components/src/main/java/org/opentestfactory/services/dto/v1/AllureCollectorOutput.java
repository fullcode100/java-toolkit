/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.dto.v1;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.opentestfactory.jackson.dto.v1.EventDtoBase;
import org.opentestfactory.messages.OTFMessage;

public class AllureCollectorOutput extends OTFMessage implements EventDtoBase {
  private final Map<String, Object> with;

  public AllureCollectorOutput(
      @JsonProperty("apiVersion") String apiVersion,
      @JsonProperty("with") Map<String, Object> with) {
    super(apiVersion);
    this.with = with;
  }

  public String testPlanId() {
    return (String) getWith().get("testPlanId");
  }

  public String allureReport() {
    return (String) getWith().get("allureReport");
  }

  public String getKind() {
    return "AllureCollectorOutput";
  }

  public String name() {
    return (String) getMetadata().get("name");
  }

  public String workflowId() {
    return (String) getMetadata().get("workflow_id");
  }

  public String jobId() {
    return (String) getMetadata().get("job_id");
  }

  public List<String> jobOrigin() {
    return (List<String>) getMetadata().get("job_origin");
  }

  public Map<String, Object> getWith() {
    return Collections.unmodifiableMap(Objects.requireNonNullElse(with, Collections.emptyMap()));
  }
}
