/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus.subscription;

import com.fasterxml.jackson.annotation.JsonInclude;
import java.net.URL;
import java.util.Objects;
import org.opentestfactory.messages.Category;
import org.opentestfactory.messages.OTFMessage;

/**
 * Specification of a subscription to the event bus.
 *
 * @author edegenetais
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Subscription extends OTFMessage {
  private static final String NAME_KEY = "name";

  public final Specification spec;

  public String name() {
    return (String) getMetadata().get(NAME_KEY);
  }

  public Subscription(Specification spec, String name) {
    super("opentestfactory.org/v1alpha1");
    this.spec = Objects.requireNonNull(spec, "Specification is mandatory.");
    addMetadata("name", name);
  }

  public static Subscription withEndpoint(String name, URL endpoint) {
    return new Subscription(new Specification(endpoint), name);
  }

  public Subscription withMatchKind(String kind) {
    return new Subscription(spec.withMatchKind(kind), name());
  }

  public Subscription withMatchLabel(String label, String value) {
    return new Subscription(spec.withMatchLabel(label, value), name());
  }

  public Subscription withMatchField(String field, String value) {
    return new Subscription(spec.withMatchField(field, value), name());
  }

  public Subscription withCategory(Category c) {
    return new Subscription(spec.withCategory(c), name());
  }
}
