/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.jersey;

import com.nimbusds.jose.util.IOUtils;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.ws.rs.ext.Provider;
import javax.ws.rs.ext.ReaderInterceptor;
import javax.ws.rs.ext.ReaderInterceptorContext;
import org.glassfish.jersey.server.ResourceConfig;
import org.opentestfactory.messages.InvalidOtfMessageException;

/**
 * This class intercepts the message in the request content to apply {@link ContentAnalyzer}
 * strategies to it.
 *
 * @see #buildDefaultAnalyzerList(org.glassfish.jersey.server.ResourceConfig)
 * @author edegenetais
 */
@Provider
public class MessageContentAnalyzerInterceptor implements ReaderInterceptor {

  private final List<ContentAnalyzer> analyzerList;

  /** Interface for a component that uses analysis of the JSON paylod content. */
  public interface ContentAnalyzer {
    /**
     * Content analysis function. This function may :
     *
     * <ul>
     *   <li>Validate content
     *   <li>Analyze content and set data into the context.
     * </ul>
     *
     * This pattern was enacted to allow separation of concern between schema based json validation
     * in {@link JsonSchemaContentAnalyzer} and the extraction of the workflow id for the
     * publication of logs as notifications in {@link WorkflowContextContentAnalyzer} without
     * storing the payload twice in memory for the duration of the request.
     *
     * @param content the incoming json event payload.
     * @throws InvalidOtfMessageException if the analyzer considers the content invalid.
     */
    void analyzeContent(String content) throws InvalidOtfMessageException;
  }

  @Inject
  public MessageContentAnalyzerInterceptor(ResourceConfig cfg) {
    this.analyzerList = buildDefaultAnalyzerList(cfg);
  }

  /**
   * This configuration wille remain hardcoded for now. If testing requires an interceptor with a
   * controlled set of analyzers, a protected constructor may be used in tests. For now, [We] Ain't
   * Gonna Need It.
   *
   * @param cfg resource configurations
   * @return the list of analyzers to use on message content.
   */
  private static List<ContentAnalyzer> buildDefaultAnalyzerList(ResourceConfig cfg) {
    List<ContentAnalyzer> analyzers = new ArrayList<>(2);
    analyzers.add(new WorkflowContextContentAnalyzer());
    analyzers.add(new JsonSchemaContentAnalyzer(cfg));
    return analyzers;
  }

  /**
   * Implementation of the {@link
   * ReaderInterceptor#aroundReadFrom(javax.ws.rs.ext.ReaderInterceptorContext)} method that checks
   * incoming messages against the relevant json schema and extract workflow context information to
   * set workflow logs up.
   *
   * @param arg0
   * @return
   * @throws IOException
   */
  @Override
  public Object aroundReadFrom(ReaderInterceptorContext arg0) throws IOException {
    // This costs memory and processing time, so it should be done once for all content
    // pre-processing.
    String content = IOUtils.readInputStreamToString(arg0.getInputStream());
    arg0.setInputStream(new ByteArrayInputStream(content.getBytes()));

    /*
     * TODO : these are separate concerns coupled here only because we don't want to store message content twice
     * and increase memory & CPU pressure.
     * We need to refactor this as a content sniffer interceptor calling two content pre-processing classes.
     */
    for (ContentAnalyzer analyzer : this.analyzerList) {
      analyzer.analyzeContent(content);
    }

    return arg0.proceed();
  }
}
