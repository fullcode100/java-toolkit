/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.validation;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.HashMap;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.messages.Status;
import org.slf4j.LoggerFactory;

/** @author edegenetais */
@Provider
public class InvalidOtfMessageExceptionMapper
    implements ExceptionMapper<InvalidOtfMessageException> {

  public InvalidOtfMessageExceptionMapper() {
    LoggerFactory.getLogger(InvalidOtfMessageExceptionMapper.class)
        .info("Registering {}", getClass());
  }

  @Override
  public Response toResponse(InvalidOtfMessageException arg0) {
    try {
      Status<String> errorStatus = new InvalidMessageStatus("v1", arg0.getMessage());
      errorStatus.setReason("Invalid message for kind " + arg0.schemaKind);
      return Response.status(422)
          .header("Content-Type", MediaType.APPLICATION_JSON)
          .entity(entityToJson(errorStatus))
          .build();
    } catch (JsonProcessingException ex) {
      final RuntimeException exception = new RuntimeExceptionImpl(ex);
      throw exception;
    }
  }

  private String entityToJson(Status<String> errorStatus) throws JsonProcessingException {
    final String entityString = new ObjectMapper().writeValueAsString(errorStatus);
    return entityString;
  }

  private static class RuntimeExceptionImpl extends RuntimeException {

    public RuntimeExceptionImpl(Throwable cause) {
      super(
          "Something's rotten in the realm of Denmark : json serialzation should NOT fail at this"
              + " stage. Please report a bug.",
          cause);
    }
  }

  private static class InvalidMessageStatus extends Status<String> {

    public InvalidMessageStatus(String apiVersion, String validationReport) {
      super(apiVersion);
      final HashMap<String, String> detailsMap = new HashMap<String, String>();
      detailsMap.put("validationReport", validationReport);
      this.setDetails(detailsMap);
      this.setCode(422);
    }
  }
}
