/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.logger;

import java.util.Objects;

/**
 * Instances of this class are attached to threads when they perform workflow-related tasks.
 *
 * @author edegenetais
 */
public class WorkflowContext {
  private static final ThreadLocal<WorkflowContext> contextStore =
      new ThreadLocal<WorkflowContext>();
  private static final String STEP_ID_KEY = "step_id";

  public final String workflowId;
  private final String jobId;
  private final String stepId;

  public static void registerWorflowContext(WorkflowContext context) {
    contextStore.set(context);
  }

  public static void cleanWorkflowContextUp() {
    contextStore.remove();
  }

  public static WorkflowContext get() {
    return contextStore.get();
  }

  public WorkflowContext(WorkflowEvent event) {
    this.workflowId =
        Objects.requireNonNull(event.workflowId(), "Teh event object needs a workflow id");

    if (event.jobId() != null) {
      this.jobId = event.jobId();
    } else {
      this.jobId = null;
    }

    if (event.getMetadata().containsKey(STEP_ID_KEY)) {
      this.stepId = (String) event.getMetadata().get("step_id");
    } else {
      this.stepId = null;
    }
  }

  public boolean hasJobId() {
    return jobId != null;
  }

  public String jobId() {
    return jobId;
  }

  public boolean hasStepId() {
    return stepId != null;
  }

  public String stepId() {
    return stepId;
  }
}
