/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus.subscription;

import com.fasterxml.jackson.annotation.JsonInclude;
import java.net.URL;
import org.opentestfactory.messages.Category;

/** @author edegenetais */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Specification {
  public final Subscriber subscriber;
  public final Selector selector;

  public Specification(URL endpoint) {
    this(new Subscriber(endpoint), null);
  }

  private Specification(Subscriber subscriber, Selector selector) {
    this.subscriber = subscriber;
    this.selector = selector;
  }

  public Specification withMatchKind(String kind) {
    if (selector == null) {
      return new Specification(subscriber, Selector.fromBase(Selector.matchKindSelector(kind)));
    } else {
      return new Specification(subscriber, Selector.fromBase(selector.withMatchKind(kind)));
    }
  }

  public Specification withMatchLabel(String label, String value) {
    if (selector == null) {
      return new Specification(
          subscriber, Selector.fromBase(Selector.matchLabelsSelector(label, value)));
    } else {
      return new Specification(
          subscriber, Selector.fromBase(selector.withMatchLabel(label, value)));
    }
  }

  public Specification withMatchField(String field, String value) {
    if (selector == null) {
      return new Specification(
          subscriber, Selector.fromBase(Selector.matchFieldSelector(field, value)));
    } else {
      return new Specification(
          subscriber, Selector.fromBase(selector.withMatchField(field, value)));
    }
  }

  public Specification withCategory(Category c) {
    if (selector == null) {
      return new Specification(subscriber, Selector.fromBase(Selector.withCategorySelector(c)));
    } else {
      return new Specification(subscriber, Selector.fromBase(selector.withCategory(c)));
    }
  }
}
