/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.domain;

import java.util.Optional;

/**
 * Describe a storage for an AGGREGATE. An Aggregate is the root of an object structure that
 * represent all the necessary data and behavior for a given set of business operation. It could be
 * considered as a specialized projection of a real domain. An Aggregate is always referenced by
 * Identity and not by value. Equality should be tested on Identity An Agrregate should be
 * referenced by id in other Aggregates. An Aggregate can contain entities (Objects with ids...) or
 * ValueObjects (Objects identified by the value of field(s), equality should be done on values)
 *
 * @param <KEY> The type of the key used for this aggregate. In SquashTF it's generally a UUID as
 *     string.
 * @param <AGGREGATE> The Class of Aggregate that must implement Identified to be sure that the id
 *     exist.
 */
public interface AggregateRepository<KEY, AGGREGATE extends Identified<KEY>> {
  Optional<AGGREGATE> findById(KEY id);

  void save(AGGREGATE aggregate);

  void remove(AGGREGATE aggregate);
}
