/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.worker;

import org.opentestfactory.jackson.dto.v1.WorkerJobComplete;
import org.opentestfactory.jackson.dto.v1.WorkerJobStarted;
import org.opentestfactory.messages.GenericNotification;
import org.opentestfactory.messages.Status;
import org.opentestfactory.services.components.bus.BusClient;
import org.opentestfactory.services.components.bus.PublicationStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.UUID;

import static org.opentestfactory.messages.OTFMessageAPI.CURRENT_API_VERSION;

/**
 * Convenience class usable to handle {@link WorkerJobStarted} and {@link WorkerJobComplete}. Only
 * recommended when start and complete are done in the same method/task. If your workload span over
 * several messages, do not use this class, it will cause more harm than good.
 *
 * @author jthebault
 */
public class WorkerNotifier {

  private static final Logger LOGGER = LoggerFactory.getLogger(WorkerNotifier.class);

  private final BusClient busClient;
  private final String workflowId;
  private final String name;
  private final String notificationId;

  public WorkerNotifier(BusClient busClient, String workflowId, String name) {
    this.busClient = busClient;
    this.workflowId = workflowId;
    this.name = name;
    notificationId = UUID.randomUUID().toString();
  }

  public void doInWorker(Runnable runnable) {
    notifyWorkerStarted();
    try {
      runnable.run();
    } finally {
      notifyWorkerCompleted();
    }
  }

  public void notifyWorkerStarted() {
    WorkerJobStarted workerJobStarted =
        new WorkerJobStarted(CURRENT_API_VERSION, name, workflowId, notificationId);
    publish(workerJobStarted);
  }

  public void notifyWorkerCompleted() {
    WorkerJobComplete workerJobCompleted =
        new WorkerJobComplete(CURRENT_API_VERSION, name, workflowId, notificationId);
    publish(workerJobCompleted);
  }

  private void publish(GenericNotification message) {
    PublicationStatus publicationStatus = busClient.publishEvent(message);
    if (publicationStatus.getStatus() == Status.StatusValue.Failure) {
      LOGGER.error(
          "Failed to send {} for workflow with id={} : {}, {}",
          message.getKind(),
          workflowId,
          publicationStatus.getReason(),
          publicationStatus.getDetails());
    } else {
      LOGGER.debug(
          "Successfully sent {} for workflow with id={} : {}, {}",
          message,
          workflowId,
          publicationStatus.getReason(),
          publicationStatus.getDetails());
    }
  }
}
