/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.jersey;

import java.util.ArrayList;
import java.util.List;
import org.glassfish.jersey.server.ResourceConfig;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.services.components.validation.JsonSchemaContentValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** @author edegenetais */
class JsonSchemaContentAnalyzer extends JsonSchemaContentValidator
    implements MessageContentAnalyzerInterceptor.ContentAnalyzer {

  private static final Logger LOGGER = LoggerFactory.getLogger(JsonSchemaContentAnalyzer.class);

  public JsonSchemaContentAnalyzer(ResourceConfig cfg) {
    super(extractCandidateInboxClasses(cfg));
  }

  private static List<Class> extractCandidateInboxClasses(ResourceConfig cfg) {
    LOGGER.info("Configuration : {}", cfg);
    List<Class> candidateInboxClasses = new ArrayList<>();
    cfg.getClasses().stream()
        .filter(
            componentClass ->
                !componentClass.getPackage().equals(JsonSchemaContentAnalyzer.class.getPackage()))
        .filter(componentClass -> !componentClass.getName().startsWith("org.glassfish."))
        .forEach(
            componentClass -> {
              candidateInboxClasses.add(componentClass);
            });
    return candidateInboxClasses;
  }

  @Override
  public void analyzeContent(String content) throws InvalidOtfMessageException {
    validateOTFJsonContent(content);
  }
}
