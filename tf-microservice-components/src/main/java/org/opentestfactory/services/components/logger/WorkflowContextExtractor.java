/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.logger;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** @author edegenetais */
public class WorkflowContextExtractor {

  protected static final Logger LOGGER = LoggerFactory.getLogger(WorkflowContextExtractor.class);

  @JsonIgnoreProperties(ignoreUnknown = true)
  static class WorkflowEvent extends org.opentestfactory.messages.WorkflowEvent {

    public WorkflowEvent(@JsonProperty(value = "apiVersion") String apiVersion) {
      super(apiVersion);
    }
  }

  public void setWorkflowContextFromContent(String content) {
    try {
      ObjectMapper mapper = new ObjectMapper();
      WorkflowEvent event = mapper.readValue(content, WorkflowEvent.class);
      final String workflowId = event.workflowId();
      if (workflowId == null) {
        LOGGER.error("No workflow id in the curernt message.");
      } else {
        WorkflowContext.registerWorflowContext(new WorkflowContext(workflowId));
      }
    } catch (JsonProcessingException ex) {
      LOGGER.error("Failed to extract a workflow id from the message, no workflow context set", ex);
    }
  }
}
