/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.logger;

import java.net.MalformedURLException;
import java.net.URL;
import org.opentestfactory.jackson.dto.v1.WorkflowLogNotification;
import org.opentestfactory.messages.OTFMessageAPI;
import org.opentestfactory.services.components.bus.BusClient;
import org.opentestfactory.services.components.bus.BusClientFactory;
import org.opentestfactory.services.components.bus.BusClientFactoryConfiguration;
import org.springframework.util.StringUtils;

/** @author edegenetais */
public class WorkflowAppender extends ch.qos.logback.core.AppenderBase {
  private URL busBaseUrl;
  private String busToken;
  private BusClient busClient;

  public WorkflowAppender() {
    System.out.println("Workflow appender created.");
  }

  public synchronized void setBusBaseUrl(String busUrl) throws MalformedURLException {
    System.out.println("Workflow Logging : target bus URL: " + busUrl);
    this.busBaseUrl = new URL(busUrl);
    this.busClient = null;
  }

  public synchronized void setBusToken(String busToken) {
    System.out.println(
        "Workflow Logging : "
            + (StringUtils.isEmpty(busToken) ? "anonymous mode" : " JWT authentication set"));
    this.busToken = busToken;
    this.busClient = null;
  }

  /** Appenders need to work quickly, so let's not recreate this client each time. */
  private synchronized BusClient getOrCreateBusClient() {
    if (this.busClient == null) {
      this.busClient =
          new BusClientFactory(new BusClientFactoryConfiguration(busBaseUrl, busToken))
              .getBusClient();
    }
    return this.busClient;
  }

  @Override
  protected void append(Object e) {
    getOrCreateBusClient()
        .publishEvent(
            new WorkflowLogNotification(
                OTFMessageAPI.CURRENT_API_VERSION,
                "Ratiocination",
                "test-wf-id",
                new WorkflowLogNotification.LogSpec(e.toString())));
  }
}
