/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.bus;

import org.opentestfactory.services.components.bus.subscription.Subscription;
import java.util.List;
import java.util.Objects;
import javax.ws.rs.ClientErrorException;
import javax.ws.rs.core.MediaType;
import org.opentestfactory.messages.Status;
import org.opentestfactory.services.components.bus.subscription.SubscriptionResult;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * This component susbcribes to the bus as configured.
 * TODO : manage subscription delete at shutdown.
 * 
 * @author edegenetais
 */
@Component
public class BusSubscriptionsLifeCycle {
    
    private BusClientFactory busClientFactory;
    
    public static interface SubscriptionCfg{
        List<Subscription> requiredSubscriptions();
    }
    
    public BusSubscriptionsLifeCycle(SubscriptionCfg cfg, BusClientFactory bus) {
        Objects.requireNonNull(cfg, "Subscription configuration is mandatory.");
        this.busClientFactory=Objects.requireNonNull(bus,"BusClientFactory reference is mandatory.");
        final BusClient bc=busClientFactory.getBusClient();
        for(Subscription subscription:cfg.requiredSubscriptions()){
            subscribe(bc, subscription);
        }
    }

    private void subscribe(final BusClient bc, Subscription subscription) {
        try{
        SubscriptionResult result =  bc.subscribe(subscription);
        if(result.getStatus()==Status.StatusValue.Failure){
            LoggerFactory.getLogger(BusSubscriptionsLifeCycle.class).error(
                    "Subscription failed: {} {} {}.\n{}",
                    result.getCode(),
                    result.getReason(),
                    result.getMessage(),
                    result.getDetails()
            );
            throw new InvalidOtfMessageException(result.getMessage()+"\n"+result.getDetails(), subscription.getKind());
        }else{
            LoggerFactory.getLogger(BusSubscriptionsLifeCycle.class).info("Event bus subscription '{}' registered as '{}'",subscription.name(),result.uuid());
        }
        }catch(ClientErrorException e){
            if(MediaType.APPLICATION_JSON_TYPE.equals(e.getResponse().getMediaType())){
                SubscriptionResult result=e.getResponse().readEntity(SubscriptionResult.class);
                throw new InvalidOtfMessageException(result.getMessage()+"\n"+result.getDetails(), subscription.getKind());
            }else{
                String explanation=e.getResponse().readEntity(String.class);
                throw new ClientErrorException(explanation, e.getResponse().getStatus(),e);
            }
        }
    }
        
}
