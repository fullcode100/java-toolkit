/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.services.components.repository;

import static java.util.Objects.requireNonNull;
import static org.apache.commons.lang3.StringUtils.isBlank;

import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import org.opentestfactory.services.components.domain.AggregateRepository;
import org.opentestfactory.services.components.domain.Identified;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Basic implementation of {@link AggregateRepository} for Aggregates with String keys. Extends it
 * in a class annotated @Component to have a singleton repository.
 *
 * @param <AGGREGATE> The type of Aggregate that a class extending this one will handle.
 */
public abstract class InMemoryRepository<AGGREGATE extends Identified<String>>
    implements AggregateRepository<String, AGGREGATE> {

  protected final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

  private final Map<String, AGGREGATE> map = new ConcurrentHashMap<>();

  @Override
  public Optional<AGGREGATE> findById(String id) {
    return Optional.ofNullable(map.get(id));
  }

  @Override
  public void save(AGGREGATE aggregate) {
    LOGGER.trace("Try to save {} ", aggregate);
    validate(aggregate);
    this.map.put(aggregate.getId(), aggregate);
    LOGGER.trace("Saved {} ", aggregate);
  }

  private void validate(AGGREGATE aggregate) {
    requireNonNull(aggregate, "Aggregate cannot be null");
    if (isBlank(aggregate.getId())) {
      throw new IllegalArgumentException("Id must not be blank");
    }
  }

  @Override
  public void remove(AGGREGATE aggregate) {
    this.map.remove(aggregate.getId());
  }
}
