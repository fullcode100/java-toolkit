/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.cfgadapter.model;

import java.util.Collections;
import java.util.Map;
import java.util.Set;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.messages.OTFMessage;

/**
 * ServiceConfiguration data model fpor java.
 *
 * @author edegenetais
 */
public class ServiceConfig extends OTFMessage {

  public final Context currentContext;
  private Map<String, Context> contexts;

  public ServiceConfig(String currentContext, Map<String, Context> contexts, String apiVersion) {
    super(apiVersion);
    if (!contexts.containsKey(currentContext)) {
      throw new InvalidOtfMessageException(
          "current-context " + currentContext + " not defined.", getKind());
    }
    this.currentContext = contexts.get(currentContext);
    this.contexts = contexts;
  }

  /**
   * READ ONLY list of defined context names.
   *
   * @return az set containing the names of all defined contexts.
   */
  public Set<String> contextNames() {
    return Collections.unmodifiableSet(contexts.keySet());
  }

  /**
   * Get a context definition by name.
   *
   * @param name name of the desired context. If no context by that name is defined, an {@link
   *     IllegalArgumentException} is thrown.
   * @return the context value.
   */
  public Context getContext(String name) {
    if (contexts.containsKey(name)) {
      return contexts.get(name);
    } else {
      throw new IllegalArgumentException("No such context " + name + " in configuration.");
    }
  }
}
