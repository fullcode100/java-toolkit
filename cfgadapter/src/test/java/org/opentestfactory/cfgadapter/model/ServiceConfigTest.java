/**
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.cfgadapter.model;

import org.opentestfactory.cfgadapter.model.Context;
import org.opentestfactory.cfgadapter.model.ServiceConfig;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.junit.Assert;
import org.junit.Test;
import org.opentestfactory.messages.InvalidOtfMessageException;

/**
 *
 * @author edegenetais
 */
public class ServiceConfigTest {

    private static final String ALTERNATE_CTX_NAME = "alternate";
    private static final String DEFAULT_CTX_NAME = "default";

    public static final Map<String, Context> contextMapForTest(){
        Map contextMap = new HashMap<String, Context>();
        contextMap.put(DEFAULT_CTX_NAME, ContextTest.DEFAULT_CONTEXT);
        contextMap.put(ALTERNATE_CTX_NAME, ContextTest.ALTERNATE_CONTEXT);
        return contextMap;
    }

    private static ServiceConfig serviceConfig() {
        return new ServiceConfig(DEFAULT_CTX_NAME, contextMapForTest(), "opentestfactory.org/v1alpha1");
    }

    @Test(expected = InvalidOtfMessageException.class)
    public void currentContextMustBeDefined(){
        new ServiceConfig("thatOneIdontKnow", contextMapForTest(), null);
    }

    @Test
    public void contextNamesMustBeListedAsDefined(){

        Set<String> expected=new HashSet<>(Arrays.asList(DEFAULT_CTX_NAME,ALTERNATE_CTX_NAME));

        ServiceConfig config=serviceConfig();

        Assert.assertEquals(expected, config.contextNames());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotRemoveName(){
        ServiceConfig config=serviceConfig();
        config.contextNames().remove(DEFAULT_CTX_NAME);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotRemoveAllNames(){
        ServiceConfig config=serviceConfig();
        config.contextNames().removeAll(Arrays.asList(DEFAULT_CTX_NAME, ALTERNATE_CTX_NAME));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotAddAlternateName(){
        ServiceConfig config=serviceConfig();
        config.contextNames().add("whyDoYouAddThat");
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotAddAllNames(){
        ServiceConfig config=serviceConfig();
        config.contextNames().addAll(Arrays.asList("oneName", "anotherName"));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotClearNames(){
        ServiceConfig config=serviceConfig();
        config.contextNames().clear();
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotRemoveIfNames(){
        ServiceConfig config=serviceConfig();
        config.contextNames().removeIf(key -> true );
    }

    @Test(expected = UnsupportedOperationException.class)
    public void cannotRetainAllNames(){
        ServiceConfig config=serviceConfig();
        config.contextNames().retainAll(Arrays.asList(DEFAULT_CTX_NAME));
    }

    @Test
    public void findProperContextByName(){
        ServiceConfig config=serviceConfig();

        Assert.assertEquals(ContextTest.ALTERNATE_CONTEXT, config.getContext(ALTERNATE_CTX_NAME));
    }

    @Test(expected = IllegalArgumentException.class)
    public void throwIllegalArgumentIfNameNotKnown(){
        serviceConfig().getContext("Unknown Stuntman");
    }
}
