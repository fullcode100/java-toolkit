/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.fluent.Response;
import org.junit.After;
import org.junit.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** This test base class adds a utility methods to check generated bus events. */
public abstract class AbstractMicroserviceIntegrationTest extends AbstractMicroServiceTestBase {

  protected final List<String> busMockSubscriptionCfg;
  private Map<String, String> subscriptionIds = new HashMap<>();

  /**
   * Complete initialization constructor : single bus spy convenience subscription version.
   *
   * @param receiverPort receiver port : where expected (or unwanted) messages will be detected if
   *     they indeed happen.
   * @see AbstractMicroServiceTestBase#AbstractMicroServiceTestBase(int, java.net.URL,
   *     org.opentestfactory.test.harness.AuthToken)
   * @param busMockSubscriptionCfg subscription of the mock to the SUT bus to spy events (on assert
   *     on existing events).
   * @param sutBaseUrl base URL for the SUT (enpoint paths are relative to this)
   */
  public AbstractMicroserviceIntegrationTest(
      int receiverPort,
      String busMockSubscriptionCfg,
      URL sutBaseUrl,
      AuthToken serviceAuthConfig) {
    this(receiverPort, sutBaseUrl, serviceAuthConfig, busMockSubscriptionCfg);
  }

  public AbstractMicroserviceIntegrationTest(
      int mockPort, URL sutBaseUrl, AuthToken serviceAuthToken, String... busMockSubscriptionCfg) {
    super(mockPort, sutBaseUrl, serviceAuthToken);
    this.busMockSubscriptionCfg =
        Arrays.asList(
            Objects.requireNonNull(
                busMockSubscriptionCfg, "Mock subscritpion list should be provided"));
  }

  @Before
  public void subscribeToBus() throws URISyntaxException, IOException {
    String busSubscribeEndpoint = BUS_BASE_URL + SUBSCRIPTIONS_PATH;
    URI busSubscribeURI = new URI(busSubscribeEndpoint);
    for (String subscription : this.busMockSubscriptionCfg) {
      String subscriptionContent =
          jsonRESTPost(
                  subscription, busSubscribeURI, subscriptionMappings(subscription), BUS_AUTH_TOKEN)
              .thenExpectHttpCreateResponseCode()
              .getResponseBodyContent();
      final Matcher uuidMatcher =
          Pattern.compile("\\{\"uuid\":\"(?<uuid>[^}]+)\"\\}").matcher(subscriptionContent);
      if (uuidMatcher.find()) {
        subscriptionIds.put(
            uuidMatcher.group("uuid"), busSubscribeURI + ";" + BUS_AUTH_TOKEN.value);
      } else {
        LOGGER.warn("Failed to extract SUT bus subscription UUID, won't be able to unsubscribe");
      }
    }
  }

  @After
  public synchronized void unsubscribeToBus() {
    Set<String> done = new HashSet<>();
    subscriptionIds
        .entrySet()
        .forEach(
            subscriptionRecord -> {
              final String subscriptionId = subscriptionRecord.getKey();
              done.add(subscriptionId);
              String callData = subscriptionRecord.getValue();
              final String[] dataTable = callData.split(";");
              if (dataTable.length != 2) {
                LOGGER.warn(
                    "Invalid subscription data {} for subscription {}", callData, subscriptionId);
              } else {
                try {
                  String busUri = dataTable[0];
                  String busToken = dataTable[1];
                  Request request =
                      Request.Delete(busUri + "/" + subscriptionId)
                          .addHeader(ContentType.JSON.header);
                  Response execute = new AuthToken(busToken).apply(request).execute();
                  int code = execute.returnResponse().getStatusLine().getStatusCode();

                  if (code != 200) {
                    LOGGER.warn("Unsubscribe request came back with code {}", code);
                  }
                } catch (IOException ex) {
                  LOGGER.warn("Failed to unsubscribe for subscription {}", subscriptionId, ex);
                }
              }
            });
    subscriptionIds.keySet().removeAll(done);
  }

  private static final Logger LOGGER =
      LoggerFactory.getLogger(AbstractMicroserviceIntegrationTest.class);
}
