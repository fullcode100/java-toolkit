/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Objects;
import java.util.Properties;
import org.slf4j.LoggerFactory;

/**
 * This class exposes test configuration data from the configuration property file.
 *
 * @author ericdegenetais
 */
public class TestConfiguration {

  public static final String CFG_FILE_SYSTEM_PROPERTY_NAME = "org.opentestfactory.test.cfg";
  private static final String DURATION_FACTOR_KEY = "sut.duration.factor.percent";

  /**
   * @deprecated this GoF like static instance is OK at test runtime but rather painfull when
   *     testing the test harness. For this reason we'll switch to a static method.
   */
  @Deprecated
  public static final TestConfiguration VALUES =
      new TestConfiguration(CFG_FILE_SYSTEM_PROPERTY_NAME);

  private final Properties cfgData;

  public static TestConfiguration values() {
    return new TestConfiguration(CFG_FILE_SYSTEM_PROPERTY_NAME);
  }

  TestConfiguration(final String cfgFilePath) {
    String cfgFileParameter = System.getProperty(cfgFilePath);
    try {
      String cfgPath =
          Objects.requireNonNull(
              cfgFileParameter,
              "The " + CFG_FILE_SYSTEM_PROPERTY_NAME + " system property should be defined");
      File canonicalCfgFile = new File(cfgPath).getCanonicalFile();
      this.cfgData = loadCfgData(canonicalCfgFile);
    } catch (IOException e) {
      LoggerFactory.getLogger(TestConfiguration.class)
          .error("Failed to load test configuration file " + cfgFileParameter, e);
      throw new IllegalArgumentException("Bad cfg file path", e);
    } catch (NullPointerException e) {
      LoggerFactory.getLogger(TestConfiguration.class)
          .error(
              "Missing mandatory "
                  + CFG_FILE_SYSTEM_PROPERTY_NAME
                  + " java system property. The configuration file path should be specified.");
      throw e;
    }
  }

  private Properties loadCfgData(File canonicalCfgFile) throws IOException {
    Properties data = new Properties();
    try (InputStream dataStream = new FileInputStream(canonicalCfgFile)) {
      data.load(dataStream);
    }
    return data;
  }

  /**
   * Get the base URL for a given SUT orchestrator service.
   *
   * @param hostURLKey configuration key for that URL.
   * @return
   */
  public URL getServiceBaseURL(String hostURLKey) {
    try {
      if (this.cfgData.containsKey(hostURLKey)) {
        return new URL(
            this.cfgData.getProperty(hostURLKey)); // We build the URL to have URL validation
      } else {
        throw new IllegalArgumentException("Missing configuration mapping fot key " + hostURLKey);
      }
    } catch (MalformedURLException e) {
      throw new IllegalArgumentException(
          "Invalid base URL " + hostURLKey + " : " + e.getMessage(), e);
    }
  }

  /**
   * @return the SUT specific duration factor for timeout adjustment. It is an integer percentage.
   *     If no duration factor is set, it is assumed to be 100% ('normal' duration).
   */
  public int getDurationFactorPercent() {
    final int durationFactorPercent =
        Integer.parseInt(this.cfgData.getProperty(DURATION_FACTOR_KEY, "100"));
    LoggerFactory.getLogger(TestConfiguration.class)
        .debug("Duration factor is set to {} %", durationFactorPercent);
    return durationFactorPercent;
  }

  /**
   * Token to authenticate the test harness againts the front services of the orchestrator under
   * test.
   *
   * @param hostTokenKey the configuration key (as tokens might de used and defined ind√©pendently
   *     for several services and the event bus).
   * @return a host token instance. The return is never null, as no token is represented by a
   *     special no token {@link AuthToken} object.
   */
  public AuthToken getServiceAuthToken(String hostTokenKey) {
    return new AuthToken(
        cfgData.getProperty(Objects.requireNonNull(hostTokenKey, "hostTokenKey may not be null")));
  }

  /** @return address used by all mocks (might be an IP address or hostname). */
  public String getMockHost() {
    return Objects.requireNonNullElse(this.cfgData.get("mock.hostname"), "localhost").toString();
  }
}
