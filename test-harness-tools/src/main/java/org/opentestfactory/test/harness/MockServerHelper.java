/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import java.time.Duration;
import org.mockserver.integration.ClientAndServer;

/**
 *
 * @author edegenetais
 */
public class MockServerHelper {
    
    private long pollIntervalTimeMillis;
    private long timeOutMillis;

    public MockServerHelper(Duration pollIntervalTimeMillis, Duration timeOutMillis) {
        this.pollIntervalTimeMillis = pollIntervalTimeMillis.toMillis();
        this.timeOutMillis = timeOutMillis.toMillis();
    }
    
    public void waitForStart(ClientAndServer serverMock) throws InterruptedException{
        long startTime=System.currentTimeMillis();
        while(System.currentTimeMillis()-startTime<timeOutMillis && !serverMock.isRunning()){
            Thread.sleep(pollIntervalTimeMillis);
        }
        if(!serverMock.isRunning()){
            throw new IllegalStateException("Mock server didn't start on time!");
        }
    }
    public void cleanStop(ClientAndServer mockServer) throws InterruptedException{
        if(mockServer!=null) {
            mockServer.stop();
            long startTime=System.currentTimeMillis();
            while(System.currentTimeMillis()-startTime<timeOutMillis && mockServer.isRunning()){
                Thread.sleep(pollIntervalTimeMillis);
            }
            if(mockServer.isRunning()){
                throw new IllegalStateException("Mock server didn't stop on time!");
            }
        }
    }
}
