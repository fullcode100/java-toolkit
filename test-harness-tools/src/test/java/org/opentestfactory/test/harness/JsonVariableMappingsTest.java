/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import net.javacrumbs.jsonunit.JsonAssert;
import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Test;

public class JsonVariableMappingsTest {

  public static final String STRING_MAPPING_VALUE = "207e1604-e930-11ea-a1ce-e710e61c0abb";

  public static final String STRING_MAPPING_EXPECTED_OUTPUT =
      "{\n"
          + "  \"apiVersion\": \"opentestfactory.org/v1alpha1\",\n"
          + "  \"kind\": \"Workflow\",\n"
          + "  \"metadata\": {\n"
          + "    \"name\": \"Simple Workflow\",\n"
          + "    \"workflow_id\": \""
          + STRING_MAPPING_VALUE
          + "\"\n"
          + "  },\n"
          + "  \"jobs\": {\n"
          + "    \"explicitJob\": {\n"
          + "      \"runs-on\":\"dummy\",\n"
          + "      \"steps\": [\n"
          + "        {\"run\": \"echo this does nothing but is a direct step\"},\n"
          + "        {\"run\":\"mvn clean test\"}\n"
          + "      ]\n"
          + "    }\n"
          + "  }\n"
          + "}";
  public static final String INTEGER_MAPPING_KEY = "integer_mapping";
  public static final String INPUT_JSON_WITH_INTEGER_MAPPING =
      "{\n"
          + "  \"apiVersion\": \"opentestfactory.org/v1alpha1\",\n"
          + "  \"kind\": \"Workflow\",\n"
          + "  \"metadata\": {\n"
          + "    \"name\": \"Simple Workflow\",\n"
          + "    \"integerProperty\": #{"
          + INTEGER_MAPPING_KEY
          + "}\n"
          + "  },\n"
          + "  \"jobs\": {\n"
          + "    \"explicitJob\": {\n"
          + "      \"runs-on\":\"dummy\",\n"
          + "      \"steps\": [\n"
          + "        {\"run\": \"echo this does nothing but is a direct step\"},\n"
          + "        {\"run\":\"mvn clean test\"}\n"
          + "      ]\n"
          + "    }\n"
          + "  }\n"
          + "}";

  public static final String INPUT_JSON_WITH_INTEGER_MAPPING_NOT_LAST_PROP =
      "{\n"
          + "  \"apiVersion\": \"opentestfactory.org/v1alpha1\",\n"
          + "  \"kind\": \"Workflow\",\n"
          + "  \"metadata\": {\n"
          + "    \"name\": \"Simple Workflow\",\n"
          + "    \"integerProperty\": #{"
          + INTEGER_MAPPING_KEY
          + "},\n"
          + "    \"lstProperty: 42"
          + "  },\n"
          + "  \"jobs\": {\n"
          + "    \"explicitJob\": {\n"
          + "      \"runs-on\":\"dummy\",\n"
          + "      \"steps\": [\n"
          + "        {\"run\": \"echo this does nothing but is a direct step\"},\n"
          + "        {\"run\":\"mvn clean test\"}\n"
          + "      ]\n"
          + "    }\n"
          + "  }\n"
          + "}";

  public static final Integer INTEGER_MAPPING_VALUE = 42;
  public static final String EXPECTED_INTEGER_MAPPING_REPLACE_RESULT =
      "{\n"
          + "  \"apiVersion\": \"opentestfactory.org/v1alpha1\",\n"
          + "  \"kind\": \"Workflow\",\n"
          + "  \"metadata\": {\n"
          + "    \"name\": \"Simple Workflow\",\n"
          + "    \"integerProperty\": "
          + INTEGER_MAPPING_VALUE
          + "\n"
          + "  },\n"
          + "  \"jobs\": {\n"
          + "    \"explicitJob\": {\n"
          + "      \"runs-on\":\"dummy\",\n"
          + "      \"steps\": [\n"
          + "        {\"run\": \"echo this does nothing but is a direct step\"},\n"
          + "        {\"run\":\"mvn clean test\"}\n"
          + "      ]\n"
          + "    }\n"
          + "  }\n"
          + "}";

  public static final String LIST_WITH_VARIABLE_ELEMENT_CONSTRUCT =
      "{\n"
          + "  \"apiVersion\": \"squashtest.org/v1alpha1\",\n"
          + "  \"kind\": \"ReportInterpreterInput\",\n"
          + "  \"metadata\": {\n"
          + "    \"name\": \"explicitJob\",\n"
          + "    \"workflow_id\": \"3fe399eb-b765-4c5a-ab10-35106bce6a6d\",\n"
          + "    \"job_id\": \"f00f1457-6615-491a-8e61-4759ed86e9a8\",\n"
          + "    \"job_origin\": [\"job_id_01\", \"job_id_02\"],\n"
          + "    \"step_id\": \"42\",\n"
          + "    \"labels\": {\n"
          + "      \"opentestfactory.org/category\": \"tm.generator\",\n"
          + "      \"opentestfactory.org/categoryPrefix\": \"tm.squashtest.org\",\n"
          + "      \"opentestfactory.org/categoryVersion\": \"v1\"\n"
          + "    },\n"
          + "    \"creationTimestamp\": \"2020-10-15T11:53:51.711657\"\n"
          + "  },\n"
          + "  \"with\": {\n"
          + "    \"testTechnology\": \"skf/skf@v1\",\n"
          + "    \"testDefinition\": \"tests#compareXmlDataset.ta\",\n"
          + "    \"attachments\":"
          + " [#{_ti_skfInterpreter_input_reportInterpreterInputWithSKF.json}]\n"
          + "  }\n"
          + "}\n";

  public static final String EXPECTED_LIST_ELEMENT_REPLACEMENT_RESULT =
      "{\n"
          + "  \"apiVersion\": \"squashtest.org/v1alpha1\",\n"
          + "  \"kind\": \"ReportInterpreterInput\",\n"
          + "  \"metadata\": {\n"
          + "    \"name\": \"explicitJob\",\n"
          + "    \"workflow_id\": \"3fe399eb-b765-4c5a-ab10-35106bce6a6d\",\n"
          + "    \"job_id\": \"f00f1457-6615-491a-8e61-4759ed86e9a8\",\n"
          + "    \"job_origin\": [\"job_id_01\", \"job_id_02\"],\n"
          + "    \"step_id\": \"42\",\n"
          + "    \"labels\": {\n"
          + "      \"opentestfactory.org/category\": \"tm.generator\",\n"
          + "      \"opentestfactory.org/categoryPrefix\": \"tm.squashtest.org\",\n"
          + "      \"opentestfactory.org/categoryVersion\": \"v1\"\n"
          + "    },\n"
          + "    \"creationTimestamp\": \"2020-10-15T11:53:51.711657\"\n"
          + "  },\n"
          + "  \"with\": {\n"
          + "    \"testTechnology\": \"skf/skf@v1\",\n"
          + "    \"testDefinition\": \"tests#compareXmlDataset.ta\",\n"
          + "    \"attachments\": [\"http://localhost:8088/my/file.json\"]\n"
          + "  }\n"
          + "}\n";

  @Test
  public void properlyReplaceStringMappingInUnixEOLResourceInputStream() throws IOException {

    try (InputStream inputResourceStream =
        getClass().getResourceAsStream("singleVariableJsonInput.bintxt")) {
      String actual =
          JsonVariableMappings.withStringMapping("workflow_uuid", STRING_MAPPING_VALUE)
              .replaceMappings(inputResourceStream);

      String expected = STRING_MAPPING_EXPECTED_OUTPUT;

      JsonAssert.assertJsonEquals(expected, actual);
    }
  }

  @Test
  public void properlyDetectStrayPatternsWithUnixEOL() throws IOException {
    try (InputStream inputResourceStream =
        getClass().getResourceAsStream("nixEOLvariabilizedSubscription.bintxt"); ) {
      String payload = IOUtils.toString(inputResourceStream, "UTF-8");
      List<String> detectedStrays = JsonVariableMappings.searchForStrayVariableConstructs(payload);
      Assert.assertEquals(1, detectedStrays.size());
      String detected = detectedStrays.get(0);
      Assert.assertEquals(":#{receiverInbox}", detected);
    }
  }

  @Test
  public void properlyDetectStrayPatternsWithDOSEOL() throws IOException {
    try (InputStream inputResourceStream =
        getClass().getResourceAsStream("dosEOLvariabillizedSubscription.bintxt"); ) {
      String payload = IOUtils.toString(inputResourceStream, "UTF-8");
      List<String> detectedStrays = JsonVariableMappings.searchForStrayVariableConstructs(payload);
      Assert.assertEquals(1, detectedStrays.size());
      String detected = detectedStrays.get(0);
      Assert.assertEquals(":#{receiverInbox}", detected);
    }
  }

  @Test
  public void properlyReplaceStringMappingInWindowsEOLResourceInputStream() throws IOException {

    try (InputStream inputResourceStream =
        getClass().getResourceAsStream("dosEOLsingleVariableJsonInput.bintxt")) {
      String actual =
          JsonVariableMappings.withStringMapping("workflow_uuid", STRING_MAPPING_VALUE)
              .replaceMappings(inputResourceStream);

      String expected = STRING_MAPPING_EXPECTED_OUTPUT;

      JsonAssert.assertJsonEquals(expected, actual);
    }
  }

  @Test
  public void properlyReplaceIntegerMappingFromString() {

    String input = INPUT_JSON_WITH_INTEGER_MAPPING;

    String expected = EXPECTED_INTEGER_MAPPING_REPLACE_RESULT;

    JsonVariableMappings testee =
        JsonVariableMappings.withIntegerMapping(INTEGER_MAPPING_KEY, INTEGER_MAPPING_VALUE);

    String actual = testee.replaceMappings(input);

    JsonAssert.assertJsonEquals(expected, actual);
  }

  @Test
  public void properlyReplaceOneListElementFromMapping() {

    String expected = EXPECTED_LIST_ELEMENT_REPLACEMENT_RESULT;

    String actual =
        JsonVariableMappings.withStringMapping(
                "_ti_skfInterpreter_input_reportInterpreterInputWithSKF.json",
                "http://localhost:8088/my/file.json")
            .replaceMappings(LIST_WITH_VARIABLE_ELEMENT_CONSTRUCT);

    JsonAssert.assertJsonEquals(expected, actual);
  }

  @Test
  public void properlyReplaceFirstListElementFromMapping() throws IOException {

    String input = IOUtils.toString(getClass().getResourceAsStream("listWithFirstMapping.json.in"));
    String expected =
        IOUtils.toString(getClass().getResourceAsStream("listMappingExpectedResult.json"));

    String actual =
        JsonVariableMappings.withStringMapping("first_mapping", "1").replaceMappings(input);

    JsonAssert.assertJsonEquals(expected, actual);
  }

  @Test
  public void properlyReplaceAllListElementsFromMapping() throws IOException {

    String input =
        IOUtils.toString(getClass().getResourceAsStream("listWithThreeMappings.json.in"));
    String expected =
        IOUtils.toString(getClass().getResourceAsStream("listMappingExpectedResult.json"));

    String actual =
        JsonVariableMappings.withStringMapping("first_mapping", "1")
            .withAdditionalStringMapping("middle_mapping", "2")
            .withAdditionalStringMapping("end_mapping", "3")
            .replaceMappings(input);

    JsonAssert.assertJsonEquals(expected, actual);
  }

  @Test
  public void properlyReplaceMiddleListElementFromMapping() throws IOException {

    String input =
        IOUtils.toString(getClass().getResourceAsStream("listWithMiddleMapping.json.in"));
    String expected =
        IOUtils.toString(getClass().getResourceAsStream("listMappingExpectedResult.json"));

    String actual =
        JsonVariableMappings.withStringMapping("middle_mapping", "2").replaceMappings(input);

    JsonAssert.assertJsonEquals(expected, actual);
  }

  @Test
  public void properlyReplaceEndListElementFromMapping() throws IOException {

    String input = IOUtils.toString(getClass().getResourceAsStream("listWithEndMapping.json.in"));
    String expected =
        IOUtils.toString(getClass().getResourceAsStream("listMappingExpectedResult.json"));

    String actual =
        JsonVariableMappings.withStringMapping("end_mapping", "3").replaceMappings(input);

    JsonAssert.assertJsonEquals(expected, actual);
  }

  @Test
  public void findStrayVariableConstructsAsLastProp() {
    List<String> actualOccurrences =
        JsonVariableMappings.searchForStrayVariableConstructs(INPUT_JSON_WITH_INTEGER_MAPPING);

    Assert.assertEquals(
        "The number of stray variable constructs occurence found is not as expected",
        1,
        actualOccurrences.size());

    Assert.assertEquals(
        "Expected construct string not found.",
        ": #{" + INTEGER_MAPPING_KEY + "}",
        actualOccurrences.get(0));
  }

  @Test
  public void findStrayVariableConstructsPropNotLastProp() {
    List<String> actualOccurrences =
        JsonVariableMappings.searchForStrayVariableConstructs(
            INPUT_JSON_WITH_INTEGER_MAPPING_NOT_LAST_PROP);

    Assert.assertEquals(
        "The number of stray variable constructs occurence found is not as expected",
        1,
        actualOccurrences.size());

    Assert.assertEquals(
        "Expected construct string not found.",
        ": #{" + INTEGER_MAPPING_KEY + "}",
        actualOccurrences.get(0));
  }

  @Test
  public void findNoStrayVariableWhenThereIsNone() {
    List<String> actualOccurrences =
        JsonVariableMappings.searchForStrayVariableConstructs(
            EXPECTED_INTEGER_MAPPING_REPLACE_RESULT);

    Assert.assertTrue("No stray variable constructs should be found", actualOccurrences.isEmpty());
  }
}
