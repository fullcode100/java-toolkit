/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import java.time.Duration;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockserver.integration.ClientAndServer;

/** @author edegenetais */
public class MockServerHelperTest {

  @Test
  public void goOkIfStartsRightAway() throws InterruptedException {
    ClientAndServer mockOfClientAndServer = Mockito.mock(ClientAndServer.class);
    Mockito.when(mockOfClientAndServer.isRunning()).thenReturn(true);
    new MockServerHelper(Duration.ZERO, Duration.ofMillis(10)).waitForStart(mockOfClientAndServer);
    Mockito.verify(mockOfClientAndServer, Mockito.times(2)).isRunning();
  }

  @Test(expected = IllegalStateException.class)
  public void throwIfStartTimesOut() throws InterruptedException {
    ClientAndServer mockOfClientAndServer = Mockito.mock(ClientAndServer.class);
    Mockito.when(mockOfClientAndServer.isRunning()).thenReturn(false);
    new MockServerHelper(Duration.ZERO, Duration.ofMillis(10)).waitForStart(mockOfClientAndServer);
    Mockito.verify(mockOfClientAndServer, Mockito.atLeast(2)).isRunning();
  }

  @Test
  public void goOkIfStopsRightAway() throws InterruptedException {
    ClientAndServer mockOfClientAndServer = Mockito.mock(ClientAndServer.class);
    Mockito.when(mockOfClientAndServer.isRunning()).thenReturn(false);
    new MockServerHelper(Duration.ZERO, Duration.ofMillis(10)).cleanStop(mockOfClientAndServer);
    Mockito.verify(mockOfClientAndServer, Mockito.times(2)).isRunning();
  }

  @Test(expected = IllegalStateException.class)
  public void throwIfStopTimesOut() throws InterruptedException {
    ClientAndServer mockOfClientAndServer = Mockito.mock(ClientAndServer.class);
    Mockito.when(mockOfClientAndServer.isRunning()).thenReturn(true);
    new MockServerHelper(Duration.ZERO, Duration.ofMillis(10)).cleanStop(mockOfClientAndServer);
    Mockito.verify(mockOfClientAndServer, Mockito.atLeast(3)).isRunning();
  }
}
