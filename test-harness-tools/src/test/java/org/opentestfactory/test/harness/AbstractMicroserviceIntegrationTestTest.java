/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Properties;
import net.javacrumbs.jsonunit.JsonAssert;
import org.apache.commons.io.IOUtils;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;
import org.mockserver.model.HttpResponse;

/** @author edegenetais */
public class AbstractMicroserviceIntegrationTestTest
    extends AbstractTestConfigurationDependentTest {
  private static final String EXPECTED_SUBSCRIPTION_PATH = "/subscriptions";
  private static final String SUBSCRIPTION_RESPONSE_BODY =
      "{\"apiVersion\":\"v1\",\"code\":201,\"details\":{\"uuid\":\"37fde541-2678-4fd9-acef-650656bfa22c\"},\"kind\":\"Status\",\"message\":\"Subscription"
          + " testclient.workflow.completed successfully registered"
          + " (id=37fde541-2678-4fd9-acef-650656bfa22c).\",\"metadata\":{},\"reason\":\"Created\",\"status\":\"Success\"}";

  private static final String VARIABILLIZED_SUBSCRIPTION_NAME = "variabillizedSubscription.json";

  private static final Integer MOCK_BUS_PORT = 8867;
  private static final Integer MOCK_SUT_PORT = 1087;

  private static class MicroserviceIntegrationTestForTest
      extends AbstractMicroserviceIntegrationTest {

    public MicroserviceIntegrationTestForTest(
        int mockPort, String busMockSubscriptionCfg, URL sutBaseUrl, AuthToken serviceAuthConfig) {
      super(mockPort, busMockSubscriptionCfg, sutBaseUrl, serviceAuthConfig);
    }
  }

  private static ClientAndServer busMock;

  @BeforeClass
  public static void setMockServersUp() throws InterruptedException {
    busMock = ClientAndServer.startClientAndServer(MOCK_BUS_PORT);
    long startTime = System.currentTimeMillis();
    while (System.currentTimeMillis() - startTime < 60 * 1000 && !busMock.isRunning()) {
      Thread.sleep(100);
    }
    if (!busMock.isRunning()) {
      throw new IllegalStateException("Mock server didn't start on time!");
    }
  }

  @AfterClass
  public static void tearMockServersDown() throws InterruptedException {
    if (busMock != null) {
      busMock.stop();
      while (busMock.isRunning()) {
        Thread.sleep(100);
      }
    }
  }

  @Before
  public void mockReset() {
    busMock.reset();
  }

  @Override
  protected void setDefaultPropertiesUp(Properties prop) {
    prop.setProperty("eventbus.base.url", "http://localhost:" + MOCK_BUS_PORT);
  }

  @Test
  public void testForBusSubscription()
      throws MalformedURLException, URISyntaxException, IOException {
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            "globalSubscription.json",
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));
    busMock
        .when(HttpRequest.request(EXPECTED_SUBSCRIPTION_PATH))
        .respond(
            HttpResponse.response()
                .withStatusCode(SUTSender.HTTP_CREATED)
                .withBody(SUBSCRIPTION_RESPONSE_BODY));

    testee.subscribeToBus();

    final HttpRequest[] recordedRequests =
        busMock.retrieveRecordedRequests(
            HttpRequest.request().withMethod("POST").withPath(EXPECTED_SUBSCRIPTION_PATH));

    Assert.assertEquals(1, recordedRequests.length);

    String payload = recordedRequests[0].getBodyAsString();

    String jsonExpectedPaylod =
        IOUtils.toString(getClass().getResourceAsStream("globalSubscription.json"));
    JsonAssert.assertJsonEquals(jsonExpectedPaylod, payload);
  }

  @Test
  public void testForBusSubsriptionWithVariabilizedPath()
      throws MalformedURLException, URISyntaxException, IOException {

    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            VARIABILLIZED_SUBSCRIPTION_NAME,
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));
    busMock
        .when(HttpRequest.request(EXPECTED_SUBSCRIPTION_PATH))
        .respond(
            HttpResponse.response()
                .withStatusCode(SUTSender.HTTP_CREATED)
                .withBody(SUBSCRIPTION_RESPONSE_BODY));

    testee.subscribeToBus();

    final HttpRequest[] recordedRequests =
        busMock.retrieveRecordedRequests(
            HttpRequest.request().withMethod("POST").withPath(EXPECTED_SUBSCRIPTION_PATH));

    Assert.assertEquals(1, recordedRequests.length);

    String payload = recordedRequests[0].getBodyAsString();

    String jsonExpectedPaylod =
        IOUtils.toString(
            getClass().getResourceAsStream("expectedVariabillizedSubscriptionPayload.json"));
    JsonAssert.assertJsonEquals(jsonExpectedPaylod, payload);
  }

  @Test
  public void exposeRealVariabilizedRelativePath() throws MalformedURLException, IOException {
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            VARIABILLIZED_SUBSCRIPTION_NAME,
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));

    Assert.assertEquals(
        "/" + VARIABILLIZED_SUBSCRIPTION_NAME,
        testee.subscriptionPath(VARIABILLIZED_SUBSCRIPTION_NAME));
  }

  @Test
  public void exposeRealVariabilizedAbsolutePath() throws MalformedURLException, IOException {
    final String absolutePathRoot = "/org/opentestfactory/test/harness/";
    final String subscriptionAbsoluteName = absolutePathRoot + VARIABILLIZED_SUBSCRIPTION_NAME;
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            subscriptionAbsoluteName,
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));

    Assert.assertEquals(
        subscriptionAbsoluteName, testee.subscriptionPath(subscriptionAbsoluteName));
  }

  @Test
  public void exposeRealNonVariabilizedPath() throws MalformedURLException, IOException {
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            "globalSubscription.json",
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));

    Assert.assertEquals("/messageIn", testee.subscriptionPath("globalSubscription.json"));
  }

  @Test
  public void knowsToUnsubscribeAfterSubscribe() throws URISyntaxException, IOException {
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            "globalSubscription.json",
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));

    busMock
        .when(HttpRequest.request(EXPECTED_SUBSCRIPTION_PATH))
        .respond(
            HttpResponse.response()
                .withStatusCode(SUTSender.HTTP_CREATED)
                .withBody(SUBSCRIPTION_RESPONSE_BODY));

    testee.subscribeToBus();
    testee.unsubscribeToBus();

    final HttpRequest[] recordedUnsubscribes =
        busMock.retrieveRecordedRequests(
            HttpRequest.request()
                .withMethod("DELETE")
                .withPath("/subscriptions/37fde541-2678-4fd9-acef-650656bfa22c"));
    Assert.assertEquals(1, recordedUnsubscribes.length);
  }

  @Test(expected = UnknownTestResource.class)
  public void theEmptyStringIsNotAValidTestResourceName() throws MalformedURLException {
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            "globalSubscription.json",
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));

    testee.useTestResource("");
  }

  @Test(expected = UnknownTestResource.class)
  public void nullIsNotAValidTestResourceName() throws MalformedURLException {
    MicroserviceIntegrationTestForTest testee =
        new MicroserviceIntegrationTestForTest(
            1088,
            "globalSubscription.json",
            new URL("http://localhost:" + MOCK_SUT_PORT),
            new AuthToken(null));

    testee.useTestResource(null);
  }
}
