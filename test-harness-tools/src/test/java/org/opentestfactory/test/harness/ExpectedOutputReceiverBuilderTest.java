/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.util.List;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.mockserver.client.server.ForwardChainExpectation;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;
import org.slf4j.LoggerFactory;

public class ExpectedOutputReceiverBuilderTest {

  private ExpectedOutputReceiverBuilder builder;

  @Before
  public void setUp() {
    ClientAndServer mockServer = Mockito.mock(ClientAndServer.class);
    Mockito.when(mockServer.when(Mockito.any()))
        .thenReturn(Mockito.mock(ForwardChainExpectation.class));
    builder = ExpectedOutputReceiverBuilder.withMock(mockServer);
  }

  @Test
  public void createBuilderWithExpectedRequests() {
    builder.withExpectedRequests(
        HttpRequest.request().withBody("{expected1}"),
        HttpRequest.request().withBody("{expected2}"));

    Assert.assertEquals("{expected1}", extractFirstExpectedRequestBodyValue());
    Assert.assertEquals("{expected2}", extractSecondExpectedRequestBodyValue());
  }

  @Test
  public void shouldWarnAboutStrayVariables() {
    Logger expectedOutputReceiverBuilderLogger =
        (Logger) LoggerFactory.getLogger(ExpectedOutputReceiverBuilder.class);
    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();
    listAppender.start();
    expectedOutputReceiverBuilderLogger.addAppender(listAppender);

    builder.withExpectedRequests(HttpRequest.request().withBody("{\nkey: #{variable}\n}"));

    List<ILoggingEvent> logList = listAppender.list;
    Assert.assertEquals(1, logList.size());
    Assert.assertEquals(Level.WARN, logList.get(0).getLevel());
    Assert.assertEquals(
        "Found not replaced variable construct {} in {}", logList.get(0).getMessage());
    Assert.assertEquals(": #{variable}", logList.get(0).getArgumentArray()[0]);
    Assert.assertEquals("{\nkey: #{variable}\n}", logList.get(0).getArgumentArray()[1]);
  }

  @Test
  public void createBuilderWithUnwantedRequests() {
    builder.withUnwantedRequests(
        HttpRequest.request().withBody("{expected1}"),
        HttpRequest.request().withBody("{expected2}"));

    Assert.assertEquals("{expected1}", extractFirstUnwantedRequestBodyValue());
    Assert.assertEquals("{expected2}", extractSecondUnwantedRequestBodyValue());
  }

  @Test
  public void createBuilderWithTemplatedExpectedRequest() throws IOException {
    builder.withExpectedRequestTemplate(
        "/withtemplate",
        new ByteArrayInputStream("inputstream".getBytes(Charset.defaultCharset())));

    Assert.assertEquals("/withtemplate", extractFirstExpectedRequestPathValue());
    Assert.assertEquals("inputstream", extractFirstExpectedRequestBodyValue());
  }

  @Test
  public void createBuilderWithIgnoreArrayElementOrder() {
    builder.withIgnoreArrayElementOrder();

    Assert.assertTrue(builder.isIgnoreArrayOrder());
  }

  @Test(expected = IllegalStateException.class)
  public void cannotAddMappingsAfterExpectedRequests() {
    builder
        .withExpectedRequests(HttpRequest.request().withBody("{}"))
        .withVariableMapping("key", "value");
  }

  @Test(expected = IllegalStateException.class)
  public void cannotAddMappingsAfterUnwantedRequests() {
    builder
        .withUnwantedRequests(HttpRequest.request().withBody("{}"))
        .withVariableMapping("key", "value");
  }

  @Test(expected = UnknownTestResource.class)
  public void cannotRegisterAttachmentWithInvalidResource() throws IOException, URISyntaxException {
    builder.withMockAttachment("/invalid/resources");
  }

  private Object extractFirstExpectedRequestBodyValue() {
    return builder.getExpectedRequests().get(0).getBody().getValue();
  }

  private String extractFirstExpectedRequestPathValue() {
    return builder.getExpectedRequests().get(0).getPath().getValue();
  }

  private Object extractSecondExpectedRequestBodyValue() {
    return builder.getExpectedRequests().get(1).getBody().getValue();
  }

  private Object extractFirstUnwantedRequestBodyValue() {
    return builder.getUnwantedRequests().get(0).getBody().getValue();
  }

  private Object extractSecondUnwantedRequestBodyValue() {
    return builder.getUnwantedRequests().get(1).getBody().getValue();
  }
}
