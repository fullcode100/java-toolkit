/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.test.harness;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.Properties;
import net.javacrumbs.jsonunit.JsonAssert;
import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;
import org.mockserver.model.HttpResponse;

/** @author edegenetais */
public class AbstractMicroserviceTestBaseTest extends AbstractTestConfigurationDependentTest {

  private static final Integer MOCK_BUS_PORT = 8867;
  private static final Integer MOCK_SUT_PORT = 1087;

  private static class AbstractMicroserviceTestBaseImplForTest
      extends AbstractMicroServiceTestBase {

    public AbstractMicroserviceTestBaseImplForTest(
        int mockPort, URL sutBaseUrl, AuthToken serviceAuthToken) {
      super(mockPort, sutBaseUrl, serviceAuthToken);
    }
  }

  private static ClientAndServer busMock;

  @BeforeClass
  public static void setMockServersUp() throws InterruptedException {
    busMock = ClientAndServer.startClientAndServer(MOCK_BUS_PORT, MOCK_SUT_PORT);
    long startTime = System.currentTimeMillis();
    while (System.currentTimeMillis() - startTime < 60 * 1000 && !busMock.isRunning()) {
      Thread.sleep(100);
    }
  }

  @AfterClass
  public static void tearMockServersDown() throws InterruptedException {
    if (busMock != null) {
      busMock.stop();
      while (busMock.isRunning()) {
        Thread.sleep(100);
      }
    }
  }

  @Before
  public void resetBus() {
    busMock.reset();
  }

  @Override
  protected void setDefaultPropertiesUp(Properties p) {
    p.setProperty("eventbus.base.url", "http://localhost:" + MOCK_BUS_PORT);
  }

  @After
  public void tearDown() {
    System.getProperties().remove("org.opentestfactory.test.cfg");
  }

  @Test
  public void createsRequestMatcherTest() throws MalformedURLException, IOException {

    AbstractMicroserviceTestBaseImplForTest testee = createTestee();
    final String mockPath = "/mockPath";

    HttpRequest requestMatcher =
        testee.requestMatcher(mockPath, "jsonPayloadForCreateRequestMatcher.json");
    String actualMatcherPath = requestMatcher.getPath().getValue();

    Assert.assertEquals(mockPath, actualMatcherPath);

    String jsonPaylod =
        IOUtils.toString(getClass().getResourceAsStream("jsonPayloadForCreateRequestMatcher.json"));
    JsonAssert.assertJsonEquals(jsonPaylod, requestMatcher.getBodyAsString());
  }

  private AbstractMicroserviceTestBaseImplForTest createTestee()
      throws java.net.MalformedURLException {
    return createTestee(new AuthToken(null));
  }

  private AbstractMicroserviceTestBaseImplForTest createTestee(AuthToken authToken)
      throws MalformedURLException {
    AbstractMicroserviceTestBaseImplForTest testee =
        new AbstractMicroserviceTestBaseImplForTest(
            1086, new URL("http://127.0.0.1:" + MOCK_SUT_PORT), authToken);
    return testee;
  }

  @Test
  public void testSendMessageToBus() throws MalformedURLException, IOException, URISyntaxException {

    AbstractMicroserviceTestBaseImplForTest testee = createTestee();
    testee.sendTestMessage("jsonPayloadForBusPublishTests.json");

    HttpRequest[] requests =
        busMock.retrieveRecordedRequests(HttpRequest.request().withMethod("POST"));
    Assert.assertEquals(1, requests.length);
    JsonAssert.assertJsonEquals("{\"integerAttribute\":5}", requests[0].getBodyAsString());
  }

  @Test(expected = UnknownTestResource.class)
  public void reportUknownTestResourceForSendMessageToBus()
      throws MalformedURLException, IOException, URISyntaxException {
    AbstractMicroserviceTestBaseImplForTest testee = createTestee();
    testee.sendTestMessage("DO_NOT_DEFINE_THIS_RESOURCE.json");
  }

  @Test
  public void testSendAuthenticatedMessageToBus()
      throws MalformedURLException, IOException, URISyntaxException {
    final String expectedTokenValue = "token-value-just-to-check";
    AbstractMicroserviceTestBaseImplForTest testee =
        createTestee(new AuthToken(expectedTokenValue));

    testee.sendTestMessage("jsonPayloadForBusPublishTests.json");

    HttpRequest[] requests =
        busMock.retrieveRecordedRequests(HttpRequest.request().withMethod("POST"));
    Assert.assertEquals(1, requests.length);
    String authHeader = requests[0].getFirstHeader("Authorization");
    Assert.assertEquals("Bearer " + expectedTokenValue, authHeader);
  }

  @Test
  public void testSendTemplatedMessageToBus()
      throws MalformedURLException, IOException, URISyntaxException {

    AbstractMicroserviceTestBaseImplForTest testee = createTestee();
    testee.sendTemplatedTestMessage(
        "jsonPayloadForTemplatedBusPublishTests.json.in",
        JsonVariableMappings.noMappings().withAdditionalStringMapping("key", "value"));

    HttpRequest[] requests =
        busMock.retrieveRecordedRequests(
            HttpRequest.request().withMethod("POST").withPath("/publications"));
    Assert.assertEquals(1, requests.length);
    JsonAssert.assertJsonEquals("{\"stringAttribute\":\"value\"}", requests[0].getBodyAsString());
  }

  @Test
  public void testYAMLSendToSUTEndPoint()
      throws MalformedURLException, URISyntaxException, IOException {

    final String destinationPath = "/destinationPath";

    busMock
        .when(HttpRequest.request().withMethod("POST").withPath(destinationPath))
        .respond(HttpResponse.response().withStatusCode(200));

    AbstractMicroserviceTestBaseImplForTest testee = createTestee();

    testee.postYAMLToSUTendPoint("yamlContentForSUTPostTest.yml", destinationPath);

    final HttpRequest[] recorderRequests =
        busMock.retrieveRecordedRequests(HttpRequest.request().withPath("/destinationPath"));
    Assert.assertEquals(1, recorderRequests.length);

    Assert.assertEquals("application/x-yaml", recorderRequests[0].getFirstHeader("Content-Type"));
    // We need to create the yaml content String from bytes as MockServer does not recognize
    // application/x-yaml as a text format.
    String yamlContent =
        new String(recorderRequests[0].getBodyAsRawBytes(), Charset.forName("UTF-8"));

    Map contentMap = new ObjectMapper(new YAMLFactory()).readValue(yamlContent, Map.class);
    String asJson = new ObjectMapper(new JsonFactory()).writeValueAsString(contentMap);
    JsonAssert.assertJsonEquals(
        "{\"neverMindTheHassle\":{\"thisIsYaml\": \"indeed\",\"yesDear\": \"really\"}}", asJson);
  }
}
