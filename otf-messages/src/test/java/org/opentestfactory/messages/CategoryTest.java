/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.HashMap;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

/**
 *
 * @author edegenetais
 */
public class CategoryTest {
    public static final String EXPECTED_CATEGORY_VERSION_LABEL = "opentestfactory.org/categoryVersion";
    public static final String EXPECTED_CATEGORY_LABEL = "opentestfactory.org/category";
    public static final String EXPECTED_CATEGORY_PREFIX_LABEL = "opentestfactory.org/categoryPrefix";

    private static final String CATEGORY_STRING = "prefix/category@version1";
    
    public static final Category A_COMPLETE_CATEGORY = new Category("prefix/name@v1");
    
    @Test(expected = NullPointerException.class)
    public void categoryDescriptorIsMandatory(){
        new Category(null);
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void failfastOnIllegalCharacter(){
        new Category("5+5");
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void failfastOnBadFormatTwoSlash(){
        new Category("prefix/name/v1");
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void failfastOnBadFormatTwoArobases(){
        new Category("prefix@name@v1");
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void failfastOnBadFormatInvertedSeparators(){
        new Category("prefix@name/v1");
    }
    
    @Test
    public void getCategoryComponentsRightOnCompleteSpec(){
        Category testee=A_COMPLETE_CATEGORY;
        Selector mockTarget=Mockito.mock(Selector.class);
        Mockito.when(mockTarget.withMatchLabel(Mockito.anyString(), Mockito.anyString())).thenReturn(mockTarget);
        
        testee.addToSelector(mockTarget);
        
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_PREFIX_LABEL, "prefix");
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_LABEL, "name");
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_VERSION_LABEL, "v1");
    }
    
    @Test
    public void getCategoryComponentsRightOnNoPrefixSpec(){
        Category testee=new Category("name@v1");
        Selector mockTarget=Mockito.mock(Selector.class);
        Mockito.when(mockTarget.withMatchLabel(Mockito.anyString(), Mockito.any())).thenReturn(mockTarget);
        
        testee.addToSelector(mockTarget);
        
        verifyNoSuchLabelMatcherAdded(mockTarget, EXPECTED_CATEGORY_PREFIX_LABEL);
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_LABEL, "name");
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_VERSION_LABEL, "v1");
    }
    
    @Test
    public void getCategoryComponentsRightOnNoNameSpec(){
        Category testee=new Category("prefix/@v1");
        Selector mockTarget=Mockito.mock(Selector.class);
        Mockito.when(mockTarget.withMatchLabel(Mockito.anyString(), Mockito.anyString())).thenReturn(mockTarget);
        
        testee.addToSelector(mockTarget);
        
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_PREFIX_LABEL, "prefix");
        verifyNoSuchLabelMatcherAdded(mockTarget, EXPECTED_CATEGORY_LABEL);
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_VERSION_LABEL, "v1");
    }
    
    @Test
    public void getCategoryComponentsRightOnNoVersionSpec(){
        Category testee=new Category("prefix/name");
        Selector mockTarget=Mockito.mock(Selector.class);
        Mockito.when(mockTarget.withMatchLabel(Mockito.anyString(), Mockito.anyString())).thenReturn(mockTarget);
        
        testee.addToSelector(mockTarget);
        
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_PREFIX_LABEL, "prefix");
        Mockito.verify(mockTarget,Mockito.times(1)).withMatchLabel(EXPECTED_CATEGORY_LABEL, "name");
        verifyNoSuchLabelMatcherAdded(mockTarget, EXPECTED_CATEGORY_VERSION_LABEL);
    }
    
    private void verifyNoSuchLabelMatcherAdded(Selector mockTarget, String labelName) {
        Mockito.verify(mockTarget,Mockito.times(0)).withMatchLabel(labelName, null);
        Mockito.verify(mockTarget,Mockito.times(0)).withMatchLabel(labelName, "");
    }
    
    @Test
    public void fullCategoryExternalFormGoesRightThroug(){
        Assert.assertEquals(CATEGORY_STRING, new Category(CATEGORY_STRING).toExternalForm());
    }
    
    @Test
    public void versionChangeWorks(){
        final Category transformedCategory = new Category(CATEGORY_STRING).withVersion("v2");
        Assert.assertEquals("prefix/category@v2", transformedCategory.toExternalForm());
    }
    
    @Test
    public void categoryChangeWorks(){
        final Category transformedCategory = new Category(CATEGORY_STRING).withCategory("otherCategory");
        Assert.assertEquals("prefix/otherCategory@version1", transformedCategory.toExternalForm());
    }
    
    @Test
    public void prefixChangeWorks(){
        final Category transformedCategory = new Category(CATEGORY_STRING).withPrefix("otherPrefix");
        Assert.assertEquals("otherPrefix/category@version1", transformedCategory.toExternalForm());
    }
    
    @Test
    public void withCategoryTest(){
        Selector testee=Selector.withCategorySelector(CategoryTest.A_COMPLETE_CATEGORY);
        Map<String,String> expectedLabels=new HashMap<>(3);
        expectedLabels.put(CategoryTest.EXPECTED_CATEGORY_LABEL,"name");
        expectedLabels.put(CategoryTest.EXPECTED_CATEGORY_PREFIX_LABEL,"prefix");
        expectedLabels.put(CategoryTest.EXPECTED_CATEGORY_VERSION_LABEL,"v1");
        Assert.assertEquals(expectedLabels,testee.matchLabels);
    }
}