/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import static org.opentestfactory.messages.ExecutionCommand.STEP_SEQUENCE_ID_KEY;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;

/** @author edegenetais */
public class ExecutionResultTest extends AbstractMessageTest {
  private static final String ROBOT_FRAMEWORK_LOG_HTML = "log.html";
  private static final String ROBOT_FRAMEWORK_PASSING_TEST_OUTPUT_XML =
      "src/test/resources/passing-output.xml";
  private static final String ROBOT_FRAMEWORK_REPORT_HTML = "report.html";

  @Test
  public void getAttachments() {
    ExecutionResult testee =
        new ExecutionResult(
            API_VERSION,
            Arrays.asList(
                ROBOT_FRAMEWORK_LOG_HTML,
                ROBOT_FRAMEWORK_PASSING_TEST_OUTPUT_XML,
                ROBOT_FRAMEWORK_REPORT_HTML),
            0,
            Collections.emptyList());

    List<String> expectedAttachments = new ArrayList<>();
    expectedAttachments.add(ROBOT_FRAMEWORK_LOG_HTML);
    expectedAttachments.add(ROBOT_FRAMEWORK_PASSING_TEST_OUTPUT_XML);
    expectedAttachments.add(ROBOT_FRAMEWORK_REPORT_HTML);
    List<String> attachments = testee.getAttachments();
    Assert.assertEquals(expectedAttachments, attachments);
  }

  @Test
  public void emptyListIfNoAtachmentInformation() {
    final ExecutionResult testee =
        new ExecutionResult(API_VERSION, null, 0, Collections.emptyList());
    Assert.assertNotNull(testee.getAttachments());
  }

  @Test
  public void standardExecutionResult() {
    final ExecutionResult testee =
        new ExecutionResult(API_VERSION, null, 0, Collections.emptyList());
    testee.addMetadata(STEP_SEQUENCE_ID_KEY, 0);
    Assert.assertFalse(testee.isJobCompletedEvent());
    Assert.assertFalse(testee.isJobStartedEvent());
    Assert.assertTrue(testee.isStandardExecutionEvent());
  }

  @Test
  public void jobStartedExecutionResult() {
    final ExecutionResult testee =
        new ExecutionResult(API_VERSION, null, 0, Collections.emptyList());
    testee.addMetadata(STEP_SEQUENCE_ID_KEY, -1);
    Assert.assertTrue(testee.isJobStartedEvent());
    Assert.assertFalse(testee.isJobCompletedEvent());
    Assert.assertFalse(testee.isStandardExecutionEvent());
  }

  @Test
  public void jobCompletedExecutionResult() {
    final ExecutionResult testee =
        new ExecutionResult(API_VERSION, null, 0, Collections.emptyList());
    testee.addMetadata(STEP_SEQUENCE_ID_KEY, -2);
    Assert.assertTrue(testee.isJobCompletedEvent());
    Assert.assertFalse(testee.isJobStartedEvent());
    Assert.assertFalse(testee.isStandardExecutionEvent());
  }
}
