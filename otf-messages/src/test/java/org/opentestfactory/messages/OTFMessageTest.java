/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import org.junit.Assert;
import org.junit.Test;

/**
 *
 * @author edegenetais
 */
public class OTFMessageTest {
    private static final String DEFAULT_DETAILS_VALUE = "This is the value of the details element.";
    
    static class TestMessage extends OTFMessage{
        public TestMessage() {
            super("v1");
        }
        
        public TestMessage(String apiVersion){
            super(apiVersion);
        }
    }
    
    @Test
    public void defaultKindIsClassName(){
        String actual=new TestMessage().getKind();
        Assert.assertEquals("TestMessage", actual);
    }
    
    /**
     * Message instances are value objects, let's enforce that !
     */
    @Test
    public void testSameDataMessagesAreEquals(){
        
        OTFMessage  msg1=createMessage();
        OTFMessage  msg2=createMessage();
        
        Assert.assertEquals("Same data objects should be equals (value semantics)", msg1, msg2);
    }

    @Test
    public void equalsHaveSameHashcode(){
        
        OTFMessage  msg1=createMessage();
        OTFMessage  msg2=createMessage();
        
        Assert.assertEquals("This test is not valid of compared instances are not equals().",msg1, msg2);
        Assert.assertEquals("The hashcode contract requires that equals objects have the same hascode.",msg1.hashCode(),msg2.hashCode());
    }
    
    @Test
    public void differentIfNotSameApiVersion(){
        TestMessage messageV1=new TestMessage("v1");
        TestMessage messageV2=new TestMessage("v2");
        
        Assert.assertNotEquals(messageV1, messageV2);
    }
    
    @Test
    public void differentIfNotSameMetadata(){
        OTFMessage  msg1=createMessage();
        OTFMessage  msg2=createMessage();
        msg2.addMetadata("metatag", "metavalue");
        
        Assert.assertNotEquals(msg1,msg2);
    }
    
    private OTFMessage createMessage() {
        OTFMessage  msg1=new TestMessage();
        msg1.addMetadata("metalabel", "metavalue");
        return msg1;
    }
}
