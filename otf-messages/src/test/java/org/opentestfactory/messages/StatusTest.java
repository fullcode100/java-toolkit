/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.HashMap;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;

/**
 *
 * @author edegenetais
 */
public class StatusTest {
    private static final String DEFAULT_DETAILS_VALUE = "This is the value of the details element.";
    
    public static Status<String> createStringDetailStatus(String detailValue) {
        final Status<String> status = new Status("v1");
        status.setStatus(Status.StatusValue.Success);
        Map<String, String> detailsMap = new HashMap<>(1);
        detailsMap.put("detail", detailValue);
        status.setDetails(detailsMap);
        return status;
    }

    
    @Test
    public void acceptRightKind(){
        new Status<String>("v1").checkKind("Status");
    }
    
    @Test(expected = IllegalArgumentException.class)
    public void refuseWrongKind(){
        new Status<String>("v1").checkKind("Workflow");
    }
    
    @Test
    public void instanceEqualsItself(){
        Status<String>  status=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        
        Assert.assertEquals("Same data objects should be equals (value semantics)", status,status);
    }
    
    @Test
    public void instanceNotEqualsToNull(){
        Status<String>  status=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        
        Assert.assertFalse("Same data objects should be equals (value semantics)", status.equals(null));
    }
    
    @Test
    public void differentIfDifferentClasses(){
        Status<String>  status=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        Status<String> otherClass=new StatusDifferentTypeCopy(status);
                
        Assert.assertNotEquals("Different effective types of statuses should not be seen as equals.", status, otherClass);
    }
    
    @Test
    public void differentIfDifferentMessages(){
        Status<String>  status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        Status<String>  status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status2.setMessage("This is not the same message.");
        
        Assert.assertNotEquals("Different effective types of statuses should not be seen as equals.", status1, status2);
    }
    
    @Test
    public void differentIfDifferentReasons(){
        Status<String>  status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status1.setReason("I'm never listened to :'(");
        Status<String>  status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status2.setReason("Parce que... et pis parce que !!!");
        
        Assert.assertNotEquals("Different effective types of statuses should not be seen as equals.", status1, status2);
    }
    
    @Test
    public void differentIfDifferentStatus(){
        Status<String>  status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status1.setStatus(Status.StatusValue.Success);
        Status<String>  status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status2.setStatus(Status.StatusValue.Failure);
        
        Assert.assertNotEquals("Different effective types of statuses should not be seen as equals.", status1, status2);
    }
    
    @Test
    public void differentIfDifferentDetails(){
        Status<String>  status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        Status<String>  status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        final HashMap<String, String> detailsOf2 = new HashMap<>();
        detailsOf2.put("hair", "split");
        status2.setDetails(detailsOf2);
        
        Assert.assertNotEquals("Different effective types of statuses should not be seen as equals.", status1, status2);
    }
    
    @Test
    public void differentIfDifferentCodes(){
        Status<String>  status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status1.setCode(200);
        Status<String>  status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        status2.setCode(401);
        
        Assert.assertNotEquals("Different effective types of statuses should not be seen as equals.", status1, status2);
    }
    
    /**
     * Status instances are value objects, let's enforce that !
     */
    @Test
    public void testSameDataStatusesAreEquals(){
        Status<String>  status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        Status<String>  status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        
        Assert.assertEquals("Same data objects should be equals (value semantics)", status1, status2);
    }
    
    @Test
    public void equalsHaveSameHashcode(){
        Status<String> status1=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        Status<String> status2=createStringDetailStatus(DEFAULT_DETAILS_VALUE);
        
        Assert.assertEquals("This test is not valid of compared instances are not equals().",status1, status2);
        Assert.assertEquals("The hashcode contract requires that equals objects have the same hascode.",status1.hashCode(),status2.hashCode());
    }

    private static class StatusDifferentTypeCopy extends Status<String> {
        public StatusDifferentTypeCopy(Status<String> original) {
            super(original.getApiVersion());
            setCode(original.getCode());
            setDetails(original.getDetails());
            setMessage(original.getMessage());
            setReason(original.getReason());
            setStatus(original.getStatus());
        }
    }
}
