/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 *
 * @author edegenetais
 */
public class ProviderCommand extends WorkflowEvent {

    private ProviderStep step;
    private List<String> runsOn;
    public final Map<String,Object> contexts;

    public ProviderCommand(String apiVersion, ProviderStep step, List<String> runsOn,Map<String,Object> contexts) {
        super(apiVersion);
        this.step = Objects.requireNonNull(step, "step is mandatory");
        this.runsOn = Objects.requireNonNull(runsOn, "runsOn is mandatory");
        this.contexts = Collections.unmodifiableMap(
                Objects.requireNonNull(contexts, "contexts is mandatory")
        );
        /*
            This constructor must create a valid object : step_origin is mandatory.
            The list is read-only, but level 2+ step may be created by adding 
            the metadata value to the new object.
        */
        addMetadata("step_origin", Collections.emptyList());
    }

    public String stepId() {
        return getMetadata().get("step_id").toString();
    }

    public List<String> stepOrigin() {
        return (List<String>) getMetadata().get("step_origin");
    }

    public List<String> runsOn() {
        return Collections.unmodifiableList(runsOn);
    }
    
    public String stepName(){
        return step.name;
    }
    
    public String uses(){
        return step.getUses();
    }
    
    public Map<String,Object> with(){
        return step.getWith();
    }
    
    public AbstractStep getStep(){
        return step;
    }
}
