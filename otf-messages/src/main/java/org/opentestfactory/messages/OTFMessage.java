/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Base class for all OTF messages.
 * @author edegenetais
 */
public abstract class OTFMessage {

    private Map<String,Object> metadata=new HashMap<>();
    public final String apiVersion;

    public OTFMessage(String apiVersion) {
        this.apiVersion = apiVersion;
    }

    public String getKind() {
        return getClass().getSimpleName();
    }
    
    /**
     * This is used to check message kind against toplevel message class.
     * @param kind 
     */
    public void checkKind(String kind){
        if(!getKind().equals(kind)){
            throw new IllegalArgumentException("Wrong kind "+kind+" for model object of kind "+getKind());
        }
    }
    
    public Object addMetadata(String key,Object value){
        return metadata.put(key, value);
    }

    public Map<String, Object> getMetadata() {
        return metadata;
    }

    public void setMetadata(Map<String,Object> metadata){
        this.metadata=new HashMap<>(metadata);
    }

    public String getApiVersion() {
        return apiVersion;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + Objects.hashCode(this.metadata);
        hash = 37 * hash + Objects.hashCode(this.apiVersion);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OTFMessage other = (OTFMessage) obj;
        if (!Objects.equals(this.apiVersion, other.apiVersion)) {
            return false;
        }
        if (!Objects.equals(this.metadata, other.metadata)) {
            return false;
        }
        return true;
    }

        
}
