/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.Objects;

/**
 * Here is the base class for messages emitted by workers when they begin working on a workflow
 * (@see {@link WorkerJobStarted}) and when their work on the workflow is complete (@see {@link
 * WorkerJobComplete})
 *
 * @author edegenetais
 */
public abstract class AbstractWorkerJobState extends OTFMessage {
  private static final String NAME_KEY = "name";
  private static final String WORKFLOW_ID_KEY = "workflow_id";

  public static class Spec {
    public final WorkerJob worker;

    public Spec(WorkerJob workerState) {
      this.worker = Objects.requireNonNull(workerState, "workerState is mandatory");
    }
  }

  public static class WorkerJob {
    public static enum Status {
      setup,
      teardown
    }

    public final String worker_id;
    public final Status status;

    public WorkerJob(String workerId, Status status) {
      this.worker_id = workerId;
      this.status = status;
    }
  }

  public final Spec spec;

  public AbstractWorkerJobState(
      final String apiVersion,
      final String name,
      final String workflowId,
      final WorkerJob workerState) {
    super(apiVersion);
    getMetadata().put(NAME_KEY, Objects.requireNonNull(name, "name is mandatory"));
    getMetadata().put(WORKFLOW_ID_KEY, Objects.requireNonNull(workflowId, "workflow is mandatory"));
    this.spec = new Spec(workerState);
  }

  protected final void checkStatus(WorkerJob spec1) throws InvalidOtfMessageException {
    if (spec1.status != spec.worker.status) {
      throw new InvalidOtfMessageException(
          "A " + spec.worker.status + " worker status was expected, not " + spec1.status,
          "Notification:" + getClass().getSimpleName());
    }
  }

  @Override
  public String getKind() {
    // TODO : remove this when kinds settled...
    return "Notification";
  }

  /**
   * Shortcut to get mandatory metadata name.
   *
   * @return the name
   */
  public String name() {
    return (String) getMetadata().get(NAME_KEY);
  }

  /**
   * Shortcut to get mandatory metadata workflow_id.
   *
   * @return the name
   */
  public String workflowId() {
    return (String) getMetadata().get(WORKFLOW_ID_KEY);
  }

  public String workerId() {
    return spec.worker.worker_id;
  }
}
