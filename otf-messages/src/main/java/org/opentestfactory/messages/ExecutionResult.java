/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.Collections;
import java.util.List;

/** @author edegenetais */
public class ExecutionResult extends WorkflowEvent {

  private List<String> attachments;
  private Integer status;
  private List<String> logs;

  public ExecutionResult(
      String apiVersion, List<String> attachments, Integer status, List<String> logs) {
    super(apiVersion);
    this.attachments = attachments;
    this.status = status;
    this.logs = logs;
  }

  public List getAttachments() {
    if (attachments == null) {
      return Collections.emptyList();
    } else {
      return attachments;
    }
  }

  /** Shortcut to get mandatory metadata step_id. */
  public String stepId() {
    return (String) getMetadata().get("step_id");
  }

  /** Shortcut to get mandatory metadata step_origin. */
  public List<String> stepOrigin() {
    return (List<String>) getMetadata().get("step_origin");
  }

  /** Shortcut to get mandatory metadata step_sequence_id. */
  public int stepSequenceId() {
    return (int) getMetadata().get("step_sequence_id");
  }

  public List<String> logs() {
    return Collections.unmodifiableList(logs == null ? Collections.emptyList() : logs);
  }

  public Integer status() {
    return status;
  }

  @Override
  public String toString() {
    return "ExecutionResult{"
        + "attachments="
        + attachments
        + ", apiVersion='"
        + apiVersion
        + '\''
        + '}';
  }
}
