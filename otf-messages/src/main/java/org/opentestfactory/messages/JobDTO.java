/**
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author edegenetais
 */
public class JobDTO {

    public final String name;
    protected List<String> needs;
    private List<String> runsOn;
    protected List<AbstractStep> steps;

    public JobDTO(String jobName, List<AbstractStep> steps, List<String> runsOn) {
        this.name = jobName;
        if(runsOn==null){
            this.runsOn=Collections.emptyList();
        }else{
            this.runsOn=runsOn;
        }
        this.steps=Objects.requireNonNull(steps, "steps are mandatory in job.");
    }

    public List<String> getNeeds() {
        return needs;
    }

    /**
     * Seing that runs-on model is a tadd contorted, we'll
     * have that special Json accessor here :
     *
     * @return what's expected for Json.
     */
    public Object jsonRunsOn() {
        switch (runsOn.size()) {
            case 0:
                return null;
            case 1:
                return runsOn.get(0);
            default:
                return runsOn;
        }
    }

    /**
     * Specifically DO NOT use the javabean property convention,
     * as we don't wan't this property to appear in the Json output.
     * @return
     */
    public List<String> runsOn() {
        return runsOn;
    }

    public List<AbstractStep> getSteps() {
        return steps;
    }

}
