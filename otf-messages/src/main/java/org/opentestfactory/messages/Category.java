/**
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Category object in selector configuration.
 *
 * @author edegenetais
 */
public class Category {

    public static final String VERSION_LABEL = "opentestfactory.org/categoryVersion";
    public static final String VALUE_LABEL = "opentestfactory.org/category";
    public static final String PREFIX_LABEL = "opentestfactory.org/categoryPrefix";

    public static final String VERSION_GROUP_NAME = "version";
    public static final String NAME_GROUP_NAME = "name";
    public static final String PREFIX_GROUP_NAME = "prefix";

    public static final Pattern FORMAT_PATTERN = Pattern.compile("^(?:(?<"+PREFIX_GROUP_NAME+">[a-zA-Z.\\-]+)\\/)?(?<"+NAME_GROUP_NAME+">[a-zA-Z0-9\\-.]+)?(?:@(?<"+VERSION_GROUP_NAME+">[a-zA-Z\\-.0-9]+))?$"
    );
    
    private final String prefix;
    private final String name;
    private final String version;

    /**
     * A category definition.
     * Category definitions are defined this way :
     * &lt;categoryPrefix&gt;/&lt;categoryName&gt;@&lt;categoryVersion&gt;
     * 
     * Any part may be missing.
     * 
     * @param categoryDefinition 
     */
    public Category(String categoryDefinition) {
        Pattern categoryFormat = FORMAT_PATTERN;
        final Matcher matcher = categoryFormat.matcher(categoryDefinition);
        if(matcher.matches()) {
            this.prefix = matcher.group(PREFIX_GROUP_NAME);
            this.name = matcher.group(NAME_GROUP_NAME);
            this.version = matcher.group(VERSION_GROUP_NAME);
        }else{
            throw new IllegalArgumentException(categoryDefinition+" is not a recognized category definition.");
        }
    }
    
    private Category(String prefix,String name, String version){
        this.prefix=prefix;
        this.name=name;
        this.version=version;
    }

    public Category withPrefix(String newPrefix){
        return new Category(newPrefix, name, version);
    }

    public Category withCategory(String newCategory){
        return new Category(prefix, newCategory, version);
    }

    public Category withVersion(String newVersion){
        return new Category(prefix, name, newVersion);
    }

    /**
     * Add the category to a selector.
     * TODO assess refactoring this method so that {@link Category} 
     * does not depend on selector. This may make the Selector model simpler.
     * @param s
     * @return 
     */
    public Selector addToSelector(Selector s){
        Selector result=s;
        if(prefix!=null){
            result=result.withMatchLabel(PREFIX_LABEL, prefix);
        }
        if(name!=null){
            result=result.withMatchLabel(VALUE_LABEL, name);
        }
        if(version!=null){
            result=result.withMatchLabel(VERSION_LABEL, version);
        }
        return result;
    }

    public String category(){
        return name;
    }

    public String prefix(){
        return prefix;
    }

    public String version(){
        return version;
    }

    public String toExternalForm(){
        return (prefix==null?"":prefix+'/')
                +(name==null?"":name)
                +(version==null?"":'@'+version);
    }
}
