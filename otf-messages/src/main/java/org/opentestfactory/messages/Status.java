/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.Map;
import java.util.Objects;

/**
 * This class represents request status responses from OTF services.
 * 
 * @param <D> type des d√©tails.
 * 
 * @author edegenetais
 */
public class Status<D> extends OTFMessage{
    
    public enum StatusValue {Success,Failure}
    
    private StatusValue status;
    private String message;
    private String reason;
    private Map<String,D> details;
    private int code;

    public Status(String apiVersion) {
        super(apiVersion);
    }

    @Override
    public String getKind(){
        //We subclass status to have easier access to specific details, but all are of kind Status.
        return "Status";
    }
    
    public void setStatus(StatusValue status){
        this.status=status;
    }
    
    public StatusValue getStatus(){
        return status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    public Map<String,D> getDetails() {
        return details;
    }

    public void setDetails(Map<String,D> details) {
        this.details = details;
    }

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 29 * hash + super.hashCode();
        hash = 29 * hash + Objects.hashCode(this.status);
        hash = 29 * hash + Objects.hashCode(this.message);
        hash = 29 * hash + Objects.hashCode(this.reason);
        hash = 29 * hash + Objects.hashCode(this.details);
        hash = 29 * hash + Objects.hashCode(this.code);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if(!super.equals(obj)){
            return false;
        }
        
        final Status<?> other = (Status<?>) obj;
        if (!Objects.equals(this.message, other.message)) {
            return false;
        }
        if (!Objects.equals(this.reason, other.reason)) {
            return false;
        }
        if (this.status != other.status) {
            return false;
        }
        if (!Objects.equals(this.details, other.details)) {
            return false;
        }
        if (this.code != other.code) {
            return false;
        }
        return true;
    }
    
    
}
