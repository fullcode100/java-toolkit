/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

/**
 * @author jthebault
 */
public class ExecutionCommand extends WorkflowEvent {

    public static final String STEP_SEQUENCE_ID_KEY = "step_sequence_id";
    public static final String STEP_ID_KEY = "step_id";

    public ExecutionCommand(String apiVersion) {
        super(apiVersion);
    }

    /**
     * Shortcut to get mandatory metadata step_id.
     */
    public String stepId() {
        return (String) getMetadata().get(STEP_ID_KEY);
    }

    public int stepSequenceId() {
        return (int) getMetadata().get(STEP_SEQUENCE_ID_KEY);
    }

    public boolean isJobStartedExecutionCommand(){
        return this.stepSequenceId() == JOB_STARTED_ID_SEQUENCE;
    }

    public boolean isJobFinishedExecutionCommand(){
        return this.stepSequenceId() == JOB_COMPLETED_ID_SEQUENCE;
    }

    // By standard, I mean non "special" event that should be modeled separately
    // But events are designed with some special executionCommand having a different meaning.
    // As version 1.0.0 we have -1 : JobStart and -2 : JobFinished
    public boolean isStandardExecutionCommand(){
        return this.stepSequenceId() >= 0;
    }

    @Override
    public String toString() {
        return "ExecutionCommand{" +
                "apiVersion='" + apiVersion + '\'' +
                "stepId='" + stepId() + '\'' +
                "stepSequenceId='" + stepSequenceId() + '\'' +
                '}';
    }
}
