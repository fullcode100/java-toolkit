/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

public abstract class AbstractExecutionEvent extends WorkflowEvent {

  protected static final int JOB_STARTED_ID_SEQUENCE = -1;
  protected static final int JOB_COMPLETED_ID_SEQUENCE = -2;
  protected static final String STEP_SEQUENCE_ID_KEY = "step_sequence_id";
  protected static final String STEP_ID_KEY = "step_id";

  protected AbstractExecutionEvent(String apiVersion) {
    super(apiVersion);
  }

  /** Shortcut to get mandatory metadata step_id. */
  public String stepId() {
    return (String) getMetadata().get(STEP_ID_KEY);
  }

  public int stepSequenceId() {
    return (int) getMetadata().get(STEP_SEQUENCE_ID_KEY);
  }

  public boolean isJobCompletedEvent() {
    return this.stepSequenceId() == JOB_COMPLETED_ID_SEQUENCE;
  }

  public boolean isJobStartedEvent() {
    return this.stepSequenceId() == JOB_STARTED_ID_SEQUENCE;
  }

  // By standard, I mean non "special" event that should be modeled separately
  // But events are designed with some special ExecutionResult having a different meaning.
  // As version 1.0.0 we have -1 : JobStart and -2 : JobFinished
  public boolean isStandardExecutionEvent() {
    return this.stepSequenceId() >= 0;
  }
}
