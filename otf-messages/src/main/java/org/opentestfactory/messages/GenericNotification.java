/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.Objects;

/**
 * Abstract Notification base class. As the json Notification event is rather generic, we decided to
 * strong type Notification into a set of subclass. Use {@link Selector} to filter the desired
 * message by using shape discriminators
 */
public abstract class GenericNotification extends OTFMessage {

  public static final String NOTIFICATION_KIND = "Notification";

  public GenericNotification(final String apiVersion, final String name, final String workflowId) {
    super(apiVersion);
    getMetadata().put(NAME_KEY, Objects.requireNonNull(name, "name is mandatory"));
    getMetadata().put(WORKFLOW_ID_KEY, Objects.requireNonNull(workflowId, "workflow is mandatory"));
  }

  @Override
  public String getKind() {
    return NOTIFICATION_KIND;
  }

  /**
   * Shortcut to get mandatory metadata name.
   *
   * @return the name
   */
  public String name() {
    return (String) getMetadata().get(NAME_KEY);
  }

  /**
   * Shortcut to get mandatory metadata workflow_id.
   *
   * @return the name
   */
  public String workflowId() {
    return (String) getMetadata().get(WORKFLOW_ID_KEY);
  }
}
