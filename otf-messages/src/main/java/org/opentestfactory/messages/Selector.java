/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.messages;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/** @author edegenetais */
public class Selector {
  public final String matchKind;
  public final Map<String, String> matchLabels;
  public final Map<String, String> matchFields;

  protected Selector(
      String matchKind, Map<String, String> matchLabels, Map<String, String> matchFields) {
    this.matchKind = matchKind;
    this.matchLabels = matchLabels;
    this.matchFields = matchFields;
  }

  public static Selector matchKindSelector(String kind) {
    return new Selector(null, null, null).withMatchKind(kind);
  }

  public static Selector matchLabelsSelector(String label, String value) {
    return new Selector(null, null, null).withMatchLabel(label, value);
  }

  public static Selector matchFieldSelector(String field, String value) {
    return new Selector(null, null, null).withMatchField(field, value);
  }

  public static Selector withCategorySelector(Category c) {
    return new Selector(null, null, null).withCategory(c);
  }

  public Selector withMatchKind(String kind) {
    return new Selector(
        Objects.requireNonNull(kind, "kind may not be null for matchKindSelector"),
        matchLabels,
        matchFields);
  }

  public Selector withMatchLabel(String label, String value) {
    Map<String, String> newMatchLabels = copyOrCreateMatchMap(this.matchLabels);
    newMatchLabels.put(
        Objects.requireNonNull(label, "Label is mandatory for matchLabel selector"),
        Objects.requireNonNull(value, "Value is mandatory for matchLabel selector"));
    return new Selector(matchKind, newMatchLabels, matchFields);
  }

  public Selector withMatchField(String field, String value) {
    Map<String, String> newMatchFields = copyOrCreateMatchMap(this.matchFields);
    newMatchFields.put(
        Objects.requireNonNull(field, "Field is mandatory for matchField selector"),
        Objects.requireNonNull(value, "Value is mandatory for matchField selector"));
    return new Selector(matchKind, matchLabels, newMatchFields);
  }

  public Selector withCategory(Category category) {
    return category.addToSelector(this);
  }

  private HashMap<String, String> copyOrCreateMatchMap(Map<String, String> matchMap) {
    if (matchMap == null) {
      return new HashMap<>();
    } else {
      return new HashMap<>(matchMap);
    }
  }
}
