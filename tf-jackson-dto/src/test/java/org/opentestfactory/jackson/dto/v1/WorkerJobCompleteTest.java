/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import java.util.HashMap;
import org.junit.Assert;
import org.junit.Test;
import org.opentestfactory.messages.AbstractWorkerJobState;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.messages.OTFMessageAPI;

/** @author edegenetais */
public class WorkerJobCompleteTest {
  protected HashMap<String, Object> buildMetadata() {
    final HashMap<String, Object> metadata = new HashMap<String, Object>();
    metadata.put("name", "my_worker");
    metadata.put("workflow_id", "my_workflow_id");
    return metadata;
  }

  @Test(expected = InvalidOtfMessageException.class)
  public void cannotCreateFromStartup() {
    new WorkerJobComplete(
        OTFMessageAPI.CURRENT_API_VERSION,
        buildMetadata(),
        new NotificationSpec(
            new WorkerJob("worker_id", AbstractWorkerJobState.WorkerJob.Status.startup)));
  }

  @Test
  public void mayCreateFromTeardown() {
    WorkerJobComplete testee =
        new WorkerJobComplete(
            OTFMessageAPI.CURRENT_API_VERSION,
            buildMetadata(),
            new NotificationSpec(
                new WorkerJob("worker_id", AbstractWorkerJobState.WorkerJob.Status.teardown)));

    Assert.assertEquals("worker_id", testee.spec.worker.worker_id);
  }
}
