/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ListOfTest {

  private static class Dummy {
    private final Integer anInt;
    private final String aString;

    Dummy(Integer anInt, String aString) {
      this.anInt = anInt;
      this.aString = aString;
    }

    public Integer getAnInt() {
      return anInt;
    }

    public String getAString() {
      return aString;
    }
  }

  private List<Dummy> dummies;

  @Before
  public void setUp() throws Exception {
    ArrayList<Dummy> dummies = new ArrayList<>();
    dummies.add(new Dummy(1, "Hello"));
    dummies.add(new Dummy(-8, "World"));
    dummies.add(new Dummy(12, "42"));
    this.dummies = dummies;
  }

  @Test(expected = NullPointerException.class)
  public void refuseNullMatchValue() {
    new ListOf<>(dummies).attributeMatchValue(Dummy::getAString, null);
  }

  @Test
  public void undefinedSelectsNoneIfAllDefined() {
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    ListOf<Dummy> filtered = listOf.attributeMatchUndefined(Dummy::getAString);
    Assert.assertTrue(filtered.toList().isEmpty());
  }

  @Test
  public void undefinedSelectsElementWithoutValueForAttribute() {
    final Dummy targetElement = new Dummy(null, "This one should trigger the bug");
    dummies.add(targetElement);
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    ListOf<Dummy> filtered = listOf.attributeMatchUndefined(Dummy::getAnInt);
    Assert.assertEquals(1, filtered.toList().size());
    Assert.assertEquals(targetElement, filtered.toList().get(0));
  }

  @Test
  public void shouldFilterByAttribute() {
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    ListOf<Dummy> filtered = listOf.attributeMatchValue(Dummy::getAnInt, 1);
    Assert.assertEquals(1, filtered.toList().size());
  }

  @Test
  public void shouldFilterByAttributeCollection() {
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    ListOf<Dummy> filtered =
        listOf.attributeMatchAny(Dummy::getAnInt, Collections.singletonList(12));
    Assert.assertEquals(1, filtered.toList().size());
  }

  @Test
  public void shouldTolerateNullGetterResult() {
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    List<Integer> nullIntolerantList = new NullIntolerantList();
    nullIntolerantList.add(5);
    ListOf<Dummy> filtered = listOf.attributeMatchAny(object -> null, nullIntolerantList);
    Assert.assertTrue(filtered.toList().isEmpty());
  }

  @Test
  public void shouldAllowNullAsCriterionIfANullTolerantCollectionIsUsed() {
    final Dummy wantedElement = new Dummy(null, "This one should trigger the bug");
    dummies.add(wantedElement);
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    List<Integer> nullTolerantList = Collections.singletonList(null);
    Assert.assertTrue(
        "We need a collection that actually says true for null if it contains null",
        nullTolerantList.contains(null));
    ListOf<Dummy> filtered = listOf.attributeMatchAny(Dummy::getAnInt, nullTolerantList);
    Assert.assertEquals("Unexpected list size.", 1, filtered.toList().size());
    Assert.assertEquals("Unexpected selected element", filtered.toList().get(0), wantedElement);
  }

  @Test(expected = NullPointerException.class)
  public void otherNpeShouldThrow() {
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    ListOf<Dummy> filtered = listOf.attributeMatchAny(Dummy::getAnInt, null);
  }

  @Test
  public void shouldPluck() {
    ListOf<Dummy> listOf = new ListOf<>(dummies);
    List<String> filtered = listOf.pluck(Dummy::getAString);
    Assert.assertEquals(3, filtered.size());
    Assert.assertEquals("Hello", filtered.get(0));
    Assert.assertEquals("World", filtered.get(1));
    Assert.assertEquals("42", filtered.get(2));
  }

  /**
   * Make sure we do use a null intolerant {@link java.util.Collection}, as otherwise our test may
   * silently fail to test the exception handling code.
   */
  private class NullIntolerantList extends ArrayList<Integer> {
    @Override
    public boolean contains(Object o) {
      if (o == null) {
        throw new NullPointerException("");
      }
      return super.contains(o);
    }
  }
}
