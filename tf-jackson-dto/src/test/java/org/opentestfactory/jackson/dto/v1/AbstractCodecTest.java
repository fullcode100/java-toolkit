/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import org.apache.commons.io.IOUtils;

/**
 * Everybody loads test objects from json to test mappings.
 *
 * @author edegenetais
 * @param <M> message type to load.
 */
public abstract class AbstractCodecTest<M> {

  private final Class<M> messageClass;

  protected AbstractCodecTest(final Class<M> messageClass) {
    this.messageClass = Objects.requireNonNull(messageClass, "Message class is mandatory");
  }

  protected M loadFromJson(String resourceName) throws AssertionError {
    try {
      String envelope = IOUtils.resourceToString(resourceName, StandardCharsets.UTF_8);
      return new ObjectMapper(new JsonFactory()).readValue(envelope, messageClass);
    } catch (IOException ex) {
      throw new AssertionError(
          "Failed to load expected "
              + messageClass.getSimpleName()
              + " envelope resource "
              + resourceName,
          ex);
    }
  }

  protected String writeAsJsonString(M event) throws JsonProcessingException {
    return new ObjectMapper(new JsonFactory()).writeValueAsString(event);
  }
}
