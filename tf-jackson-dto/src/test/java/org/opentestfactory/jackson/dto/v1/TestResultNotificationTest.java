/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class TestResultNotificationTest {

  private ObjectMapper objectMapper;

  @Before
  public void setup() {
    objectMapper = new ObjectMapper();
  }

  @Test
  public void shouldConstructCorrectly() {
    TestResultNotification notification = buildNotification();

    checkOtfMessageProperties(notification);
    checkMetadata(notification);
    checkTestResults(notification);
  }

  @Test
  public void shouldGetMetadataFields() {
    TestResultNotification notification = buildNotification();
    Assert.assertEquals("a08eea20-c31d-431f-8fd8-fed275349fce", notification.workflowId());
    Assert.assertEquals("run33", notification.name());
    Assert.assertEquals(
        List.of("96cf4a7a-82cd-4665-9366-5c6166fcafc0"), notification.attachmentOrigin());
  }

  private static void checkOtfMessageProperties(TestResultNotification notification) {
    Assert.assertEquals("opentestfactory.org/v1alpha1", notification.getApiVersion());
    Assert.assertEquals("Notification", notification.getKind());
  }

  private static void checkMetadata(TestResultNotification notification) {
    Map<String, Object> metadata = notification.getMetadata();
    Assert.assertEquals(3, metadata.size());
    Assert.assertEquals("run33", metadata.get("name"));
    Assert.assertEquals("a08eea20-c31d-431f-8fd8-fed275349fce", metadata.get("workflow_id"));

    List<String> attachmentsOrigins = (List<String>) metadata.get("attachment_origin");
    Assert.assertEquals(1, attachmentsOrigins.size());
    Assert.assertEquals("96cf4a7a-82cd-4665-9366-5c6166fcafc0", attachmentsOrigins.get(0));
  }

  private static void checkTestResults(TestResultNotification notification) {
    List<TestResultNotification.TestResult> testResults = notification.getTestResults();
    Assert.assertEquals(1, testResults.size());

    TestResultNotification.TestResult testResult = testResults.get(0);
    Assert.assertEquals("e2b58499-bf8f-4099-a086-3c11afadfbb0", testResult.id);
    Assert.assertEquals("Gherkin#Addition", testResult.name);
    Assert.assertEquals(TestResultNotification.Status.SUCCESS, testResult.status);
    Assert.assertEquals("96cf4a7a-82cd-4665-9366-5c6166fcafc0", testResult.attachmentOrigin);
  }

  @Test
  public void shouldSerializeCorrectly() throws IOException {
    String expectedJson = getExpectedJson();
    TestResultNotification actualNotification = buildNotification();

    String serializationResult = objectMapper.writeValueAsString(actualNotification);

    Assert.assertEquals(
        objectMapper.readTree(expectedJson), objectMapper.readTree(serializationResult));
  }

  private static TestResultNotification buildNotification() {
    TestResultNotification testResultNotification =
        new TestResultNotification(
            "opentestfactory.org/v1alpha1",
            "run33",
            "a08eea20-c31d-431f-8fd8-fed275349fce",
            List.of("96cf4a7a-82cd-4665-9366-5c6166fcafc0"));
    testResultNotification.addTestResults(
        List.of(
            new TestResultNotification.TestResult(
                "e2b58499-bf8f-4099-a086-3c11afadfbb0",
                "Gherkin#Addition",
                TestResultNotification.Status.SUCCESS,
                "96cf4a7a-82cd-4665-9366-5c6166fcafc0")));
    return testResultNotification;
  }

  private static String getExpectedJson() throws IOException {
    return IOUtils.resourceToString("/TestResultNotification.json", StandardCharsets.UTF_8);
  }
}
