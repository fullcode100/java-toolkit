/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.HashMap;
import net.javacrumbs.jsonunit.JsonAssert;
import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Test;
import org.opentestfactory.messages.AbstractWorkerJobState;
import org.opentestfactory.messages.InvalidOtfMessageException;
import org.opentestfactory.messages.OTFMessageAPI;

/** @author edegenetais */
public class WorkerJobStartedTest extends AbstractCodecTest<WorkerJobStarted> {
  private static final String WORKER_JOB_STARTED_JSON = "/workerJobStarted.json";

  public WorkerJobStartedTest() {
    super(WorkerJobStarted.class);
  }

  protected HashMap<String, Object> buildMetadata() {
    final HashMap<String, Object> metadata = new HashMap<String, Object>();
    metadata.put("name", "my_worker");
    metadata.put("workflow_id", "my_workflow_id");
    return metadata;
  }

  @Test(expected = InvalidOtfMessageException.class)
  public void cannotCreateFromTeardown() {
    new WorkerJobStarted(
        OTFMessageAPI.CURRENT_API_VERSION,
        buildMetadata(),
        new NotificationSpec(new WorkerJob("worker_id", AbstractWorkerJobState.WorkerJob.Status.teardown)));
  }

  @Test
  public void mayCreateFromStartup() {
    WorkerJobStarted testee =
        new WorkerJobStarted(
            OTFMessageAPI.CURRENT_API_VERSION,
            buildMetadata(),
            new NotificationSpec(new WorkerJob("worker_id", AbstractWorkerJobState.WorkerJob.Status.setup)));

    Assert.assertEquals("worker_id", testee.spec.worker.worker_id);
  }

  @Test
  public void properlyDeserializedStatus() {
    WorkerJobStarted event = loadFromJson(WORKER_JOB_STARTED_JSON);
    Assert.assertEquals(AbstractWorkerJobState.WorkerJob.Status.setup, event.spec.worker.status);
  }

  @Test
  public void properlyDeserializedWorkerId() {
    WorkerJobStarted event = loadFromJson(WORKER_JOB_STARTED_JSON);
    Assert.assertEquals("2080ab78-3dd5-47fe-a0ac-714a1702b95d", event.spec.worker.worker_id);
  }

  @Test
  public void properlyDeserializedWorkerName() {
    WorkerJobStarted event = loadFromJson(WORKER_JOB_STARTED_JSON);
    Assert.assertEquals("TM Publisher Worker", event.name());
  }

  @Test
  public void properlyDeserializedWorkerWFid() {
    WorkerJobStarted event = loadFromJson(WORKER_JOB_STARTED_JSON);
    Assert.assertEquals("1ac33509-c514-4805-86e9-f728f3df8eea", event.workflowId());
  }

  @Test
  public void roundTripTest() throws IOException {
    WorkerJobStarted event = loadFromJson(WORKER_JOB_STARTED_JSON);
    String expected = IOUtils.resourceToString(WORKER_JOB_STARTED_JSON, Charset.forName("UTF-8"));
    String actual = writeAsJsonString(event);
    JsonAssert.assertJsonEquals(expected, actual);
  }
}
