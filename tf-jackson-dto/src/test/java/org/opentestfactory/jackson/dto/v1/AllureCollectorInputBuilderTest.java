/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import org.junit.Assert;
import org.junit.Test;

import java.util.Collections;

import static org.opentestfactory.jackson.dto.v1.AllureCollectorInput.ATTACHMENTS_FIELD_KEY;
import static org.opentestfactory.jackson.dto.v1.AllureCollectorInput.TEST_PLAN_ID_FIELD_KEY;

public class AllureCollectorInputBuilderTest {

  @Test
  public void shouldBuildAllureInputTest() {
    // @formatter:off
    AllureCollectorInput message =
        new AllureCollectorInput.AllureCollectorInputBuilder("API_VERSION")
            .meta()
            .withName("toto")
            .withWorkflowId("123456")
            .with()
            .withTestPlanId("111")
            .withAttachments(Collections.singleton("atta"))
            .build();
    // @formatter:on
    Assert.assertEquals("toto", message.name());
    Assert.assertEquals("123456", message.workflowId());
    Assert.assertEquals("111", message.getWith().get(TEST_PLAN_ID_FIELD_KEY));
    Assert.assertEquals(1, message.attachments().size());
    Assert.assertEquals("atta", message.attachments().get(0));
  }

  // Attachment min size is set to 1 in json schema
  // So the property must be either null or with a list having size > 0
  @Test
  public void shouldIgnoreEmptyAttachment() {
    // @formatter:off
    AllureCollectorInput message =
        new AllureCollectorInput.AllureCollectorInputBuilder("API_VERSION")
            .meta()
            .withName("toto")
            .withWorkflowId("123456")
            .with()
            .withTestPlanId("111")
            .withAttachments(Collections.emptySet())
            .build();
    // @formatter:on
    Assert.assertNull(message.getWith().get(ATTACHMENTS_FIELD_KEY));
  }

  @Test(expected = IllegalArgumentException.class)
  public void shouldRefuseEmptyTestPlanId() {
    new AllureCollectorInput.AllureCollectorInputBuilder("API_VERSION")
        .meta()
        .withName("132")
        .withWorkflowId("hello")
        .with()
        .withTestPlanId("   ")
        .build();
  }

  @Test(expected = IllegalArgumentException.class)
  public void shouldRefuseEmptyMeta() {
    new AllureCollectorInput.AllureCollectorInputBuilder("API_VERSION").build();
  }

  @Test(expected = IllegalArgumentException.class)
  public void shouldRefuseMetaWithoutName() {
    new AllureCollectorInput.AllureCollectorInputBuilder("API_VERSION")
        .meta()
        .withWorkflowId("123")
        .build();
  }

  @Test(expected = IllegalArgumentException.class)
  public void shouldRefuseMetaWithoutWorkflowId() {
    new AllureCollectorInput.AllureCollectorInputBuilder("API_VERSION")
        .meta()
        .withName("123")
        .build();
  }
}
