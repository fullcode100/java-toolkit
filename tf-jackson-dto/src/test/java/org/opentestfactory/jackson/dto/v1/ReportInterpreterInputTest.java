/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ReportInterpreterInputTest {

  private static final String STEP_ID = "42";
  private static final String TEST_TECHNOLOGY = "arbitrary_tech";
  private static final String TEST_DEFINITION = "test_definition";
  private static final List<String> ATTACHMENTS =
      Arrays.asList("123_report.xml", "456_output.html");

  private ReportInterpreterInput testee;

  @Before
  public void setup() {
    try {
      String envelope =
          IOUtils.resourceToString("/InterpreterInputTest.json", Charset.forName("UTF-8"));
      testee =
          new ObjectMapper(new JsonFactory()).readValue(envelope, ReportInterpreterInput.class);
    } catch (IOException ex) {
      throw new AssertionError(
          "Failed to load expected report interpreter input envelope resource.", ex);
    }
  }

  @Test
  public void verifyStepId() {
    Assert.assertEquals(STEP_ID, testee.stepId());
  }

  @Test
  public void verifyTestTechnology() {
    Assert.assertEquals(TEST_TECHNOLOGY, testee.testTechnology());
  }

  @Test
  public void verifyTestDefinition() {
    Assert.assertEquals(TEST_DEFINITION, testee.testDefinition());
  }

  @Test
  public void verifyAttachments() {
    Assert.assertEquals(ATTACHMENTS, testee.attachments());
  }
}
