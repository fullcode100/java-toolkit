/*
 *  Copyright (c) 2020 - 2023 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import static org.opentestfactory.jackson.dto.v1.ExecutionResult.ATTACHMENT_KEY;

import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ExecutionResultTest extends AbstractCodecTest<ExecutionResult> {

  ExecutionResult testee;

  public ExecutionResultTest() {
    super(ExecutionResult.class);
  }

  @Before
  public void setup() {
    testee = loadFromJson("/passStatusExecutionResult.json");
  }

  @Test
  public void shouldReturnAttachmentStatusMap() {
    ExecutionResult.Attachments actualAttachments = testee.attachmentDetails();
    Assert.assertEquals(3, actualAttachments.toList().size());

    ExecutionResult.Attachment firstAttachment =
        actualAttachments
            .attributeMatchValue(ExecutionResult.Attachment::getUrl, "log.html")
            .toList()
            .get(0);
    Assert.assertEquals("111-222-333", firstAttachment.getUuid());
    Assert.assertEquals(
        "text/vnd.opentestfactory.robotframework-log+html", firstAttachment.getType());
    Assert.assertEquals("log.html", firstAttachment.getUrl());
  }

  @Test
  public void shouldHandleNullAttachmentStatusMap() {
    ExecutionResult executionResult = loadFromJson("/nullAttachmentsExecutionResult.json");
    ExecutionResult.Attachments attachments = executionResult.attachmentDetails();

    Assert.assertTrue(attachments.toList().isEmpty());
  }

  @Test
  public void shouldAddAttachment() {
    ExecutionResult executionResult =
        loadFromJson("/nullAttachmentsExecutionResult.json")
            .addAttachment(new ExecutionResult.Attachment("uuid", "type", "url"));

    Map<String, Object> attachments =
        (Map<String, Object>) executionResult.getMetadata().get(ATTACHMENT_KEY);
    Assert.assertEquals(1, attachments.size());
  }

  @Test
  public void shouldReturnStepOriginStatusMap() {
    int expected = 1;
    int actual = testee.getNbResult("000");

    Assert.assertEquals(expected, actual);
  }

  @Test
  public void stepStatusShouldReturnEmptyListIfNoData() {
    ExecutionResult intermediateER = loadFromJson("/intermediateExecutionResult.json");
    List<ExecutionResult.StepStatusDTO> actual = intermediateER.stepOriginStatus();

    Assert.assertTrue(actual.isEmpty());
  }

  /** Some of them will still exist so we need to be prepared to accept them. */
  @Test
  public void mustTolerateUntypedExecutionResult() {
    ExecutionResult intermediateER = loadFromJson("/untypedExecutionResult.json");

    Assert.assertEquals(3, intermediateER.attachmentDetails().toList().size());
    Assert.assertEquals(
        "444-555-666",
        intermediateER
            .attachmentDetails()
            .attributeMatchValue(
                ExecutionResult.Attachment::getUrl, "src/test/resources/passing-output.xml")
            .toList()
            .get(0)
            .getUuid());
  }

  @Test
  public void attachmentEqualsShouldBeReflexive() {
    ExecutionResult.Attachment attachment = new ExecutionResult.Attachment("uuid", "type", "url");

    Assert.assertEquals(attachment, attachment);
    Assert.assertEquals(attachment.hashCode(), attachment.hashCode());
  }

  @Test
  public void attachmentEqualsShouldBeSymmetric() {
    ExecutionResult.Attachment attachment1 = new ExecutionResult.Attachment("uuid", "type", "url");
    ExecutionResult.Attachment attachment2 = new ExecutionResult.Attachment("uuid", "type", "url");

    Assert.assertEquals(attachment1, attachment2);
    Assert.assertEquals(attachment2, attachment1);
    Assert.assertEquals(attachment1.hashCode(), attachment2.hashCode());
  }

  @Test
  public void attachmentsShouldNotBeEqual() {
    ExecutionResult.Attachment attachment = new ExecutionResult.Attachment("uuid", "type", "url");

    ExecutionResult.Attachment otherUuid = new ExecutionResult.Attachment("uuid2", "type", "url");
    Assert.assertNotEquals(attachment, otherUuid);

    ExecutionResult.Attachment otherType = new ExecutionResult.Attachment("uuid", "type2", "url");
    Assert.assertNotEquals(attachment, otherType);

    ExecutionResult.Attachment otherUrl = new ExecutionResult.Attachment("uuid", "type", "url2");
    Assert.assertNotEquals(attachment, otherUrl);

    Assert.assertNotEquals(attachment, new Object());
    Assert.assertNotEquals(attachment, null);
  }
}
