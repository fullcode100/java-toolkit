/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import org.opentestfactory.jackson.dto.v1.ExecutionResult;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

public class ExecutionResultTest {



    ExecutionResult testee;

    @Before
    public void setup() {
        testee = loadExecutionResult("/passStatusExecutionResult.json");
    }

    private ExecutionResult loadExecutionResult(String resourceName) throws AssertionError {
        try {
            String envelope= IOUtils.resourceToString(resourceName, StandardCharsets.UTF_8);
            return new ObjectMapper(new JsonFactory()).readValue(envelope, ExecutionResult.class);
        } catch (IOException ex) {
            throw new AssertionError("Failed to load expected ExecutionResult envelope resource "+resourceName,ex);
        }
    }

    @Test
    public void shouldReturnAttachmentStatusMap() {
        Map<String, ExecutionResult.AttachmentStatusDTO> actualMap = testee.attachmentStatus();
        Assert.assertEquals(3, actualMap.size());
        Assert.assertEquals("111-222-333", actualMap.get("log.html").getUuid());
    }

    @Test
    public void shouldReturnStepOriginStatusMap() {
        int expected = 1;
        int actual = testee.getNbResult("000");
        Assert.assertEquals(expected, actual);
    }
    
    @Test
    public void stepStatusShouldReturnEmptyListIfNoData(){
        ExecutionResult intermediateER = loadExecutionResult("/intermediateExecutioResult.json");
        List<ExecutionResult.StepStatusDTO> actual = intermediateER.stepOriginStatus();
        Assert.assertTrue(actual.isEmpty());
    }
}
