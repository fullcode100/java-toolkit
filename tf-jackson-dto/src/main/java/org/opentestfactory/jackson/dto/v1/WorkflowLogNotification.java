/*
 *  Copyright (c) 2020 - 2022 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.opentestfactory.messages.GenericNotification;

/** @author edegenetais */
public class WorkflowLogNotification extends GenericNotification {

  public static class LogSpec {
    public final List<String> logs;

    public LogSpec(@JsonProperty("logs") String... logLines) {
      this.logs = Collections.unmodifiableList(Arrays.asList(logLines));
    }
  }

  public final LogSpec spec;

  public WorkflowLogNotification(
      @JsonProperty("apiVersion") String apiVersion,
      @JsonProperty("metadata") Map<String, Object> metadata,
      @JsonProperty("spec") LogSpec spec) {
    this(apiVersion, (String) metadata.get("name"), (String) metadata.get("workflow_id"), spec);
    setMetadata(metadata);
  }

  public WorkflowLogNotification(String apiVersion, String name, String workflowId, LogSpec spec) {
    super(apiVersion, name, workflowId);
    this.spec = Objects.requireNonNull(spec, "The spec property is mandatory");
  }

  public void addJobId(String jobId) {
    getMetadata().put("job_id", jobId);
  }

  public void addStepId(String stepId) {
    getMetadata().put("step_id", stepId);
  }
}
