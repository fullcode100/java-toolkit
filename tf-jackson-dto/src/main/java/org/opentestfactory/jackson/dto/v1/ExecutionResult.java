/*
 *  Copyright (c) 2020 - 2021 Henix, henix.fr
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestfactory.jackson.dto.v1;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/** @author lpoma */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ExecutionResult extends org.opentestfactory.messages.ExecutionResult
    implements EventDtoBase {

  public ExecutionResult(
      @JsonProperty("apiVersion") String apiVersion,
      @JsonProperty("attachments") List<String> attachments,
      @JsonProperty("status") Integer status,
      @JsonProperty("logs") List<String> logs) {
    super(apiVersion, attachments, status, logs);
  }

  public Map<String, AttachmentStatusDTO> attachmentStatus() {
    Map<String, Object> deserializedAttachmentStatusMap =
        (Map<String, Object>) getMetadata().get("attachments");
    if (deserializedAttachmentStatusMap == null) {
      return Collections.emptyMap();
    } else {
      Map<String, AttachmentStatusDTO> attachmentStatusMap = new HashMap<>();
      ObjectMapper mapper = new ObjectMapper();
      for (Map.Entry<String, Object> content : deserializedAttachmentStatusMap.entrySet()) {
        AttachmentStatusDTO attachmentStatusDTO =
            mapper.convertValue(content.getValue(), AttachmentStatusDTO.class);
        attachmentStatusMap.put(content.getKey(), attachmentStatusDTO);
      }
      return attachmentStatusMap;
    }
  }

  /**
   * Shortcut to get optional metadata step_origin_status. Reserved for end-step and end-job events.
   */
  public List<StepStatusDTO> stepOriginStatus() {
    Map<String, Object> stepOriginStatusList =
        (Map<String, Object>) getMetadata().get("step_origin_status");
    if (stepOriginStatusList == null) {
      return Collections.emptyList();
    } else {
      return stepOriginStatusList.entrySet().stream()
          .map(entry -> new StepStatusDTO((String) entry.getKey(), (Integer) entry.getValue()))
          .collect(Collectors.toList());
    }
  }

  /**
   * Calculate the total number of results generated from the step uuid provided. Used to know how
   * many ExecutionResult are expected by a publisher module before trying to parse their
   * attachments/test reports.
   *
   * @param stepUuid
   * @return the total number of ExecutionResult linked to the step whose uuid is provided. Returns
   *     <code>null</code> if the expected number is not yet known (the number of executed commands
   *     may change as a result of conditional step execution in the workflow).
   */
  public Integer getNbResult(String stepUuid) {
    Objects.requireNonNull(stepUuid, "Step UUIT cannot be null.");
    Integer nbResult = null;
    for (StepStatusDTO status : stepOriginStatus()) {
      if (stepUuid.equals(status.getStepUuid())) {
        nbResult = status.getNbResult();
      }
    }
    return nbResult;
  }

  /** Technical class */
  public static class AttachmentStatusDTO {

    private String uuid;
    private String mediaType;

    public AttachmentStatusDTO(
        @JsonProperty("uuid") String uuid, @JsonProperty("mediatype") String mediaType) {
      this.uuid = uuid;
      this.mediaType = mediaType;
    }

    public String getUuid() {
      return uuid;
    }

    public String getMediaType() {
      return mediaType;
    }
  }

  /**
   * Technical class to facilitate the mapping between a step and the number of ExecutionResult it
   * has generated during its lifecycle
   */
  public static class StepStatusDTO {

    private final String stepUuid;
    private final Integer nbResult;

    public StepStatusDTO(
        @JsonProperty("step_uuid") String stepUuid, @JsonProperty("nb_result") Integer nbResult) {
      this.stepUuid = stepUuid;
      this.nbResult = nbResult;
    }

    public String getStepUuid() {
      return stepUuid;
    }

    public Integer getNbResult() {
      return nbResult;
    }
  }
}
